name: dbt qa Merge Checks

on:
  push:
    branches:
      - qa

jobs:
  dbt-test-and-run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install dbt dbt-databricks

      - name: Create profiles.yml (Configure dbt profile for test environment)
        run: |
          mkdir -p ~/.dbt
          echo "
          dataxdemo:
            target: test
            outputs:
              test:
                type: databricks
                catalog: catalog_test
                schema: default
                host: ${{ secrets.DATABRICKS_HOST }}
                http_path: ${{ secrets.DATABRICKS_HTTP_PATH }}
                token: ${{ secrets.DATABRICKS_TOKEN }}
                threads: 4
          " > ~/.dbt/profiles.yml

      - name: Run dbt debug (Check dbt connection and configuration)
        run: dbt debug --profiles-dir ~/.dbt

      - name: Run dbt deps (Install required dbt packages and dependencies)
        run: dbt deps --profiles-dir ~/.dbt

      - name: Run Unit and Generic (with Great Expectations) tests
        id: unit_generic_tests
        run: dbt test --profiles-dir ~/.dbt --select test_type:unit test_type:generic --output unit_generic_results.json
        continue-on-error: true

      - name: Run Unit, Generic, Singular, and Great Expectations tests
        id: all_tests
        run: dbt test --profiles-dir ~/.dbt --output all_results.json
        continue-on-error: true

      - name: Generate test summary
        id: test_summary
        run: |
          echo "UNIT_GENERIC_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          python -c "
          import json
          try:
              with open('unit_generic_results.json') as f:
                  data = json.load(f)
              failed = [r for r in data['results'] if r['status'] == 'fail']
              print(f'{len(failed)} unit/generic tests failed')
              for test in failed[:5]:
                  print(f'- {test[\"unique_id\"]}: {test[\"message\"]}')
          except Exception as e:
              print(f'Error processing unit_generic_results.json: {str(e)}')
              " >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              
              echo "ALL_TESTS_SUMMARY<<EOF" >> $GITHUB_OUTPUT
              python -c "
          import json
          try:
              with open('all_results.json') as f:
                  data = json.load(f)
              failed = [r for r in data['results'] if r['status'] == 'fail']
              print(f'{len(failed)} total tests failed')
              for test in failed[:5]:
                  print(f'- {test[\"unique_id\"]}: {test[\"message\"]}')
          except Exception as e:
              print(f'Error processing all_results.json: {str(e)}')
              " >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT

      - name: Notify Slack - Unit and Generic Tests
        if: steps.unit_generic_tests.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: 'dataxdemo-notifications'
          payload: |
            {
              "text": "Unit and Generic Tests Failure Summary for qa branch",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Unit and Generic Tests Failure Summary for qa branch*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Job Results>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.test_summary.outputs.UNIT_GENERIC_SUMMARY }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Repository: ${{ github.repository }} | Run ID: ${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Slack - All Tests
        if: steps.all_tests.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: 'dataxdemo-notifications'
          payload: |
            {
              "text": "All Tests Failure Summary for qa branch",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*All Tests Failure Summary for qa branch*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Job Results>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.test_summary.outputs.ALL_TESTS_SUMMARY || 'No detailed test summary available. Please check the job results for more information.' }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Repository: ${{ github.repository }} | Run ID: ${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Fail workflow if tests failed
        if: steps.unit_generic_tests.outcome == 'failure' || steps.all_tests.outcome == 'failure'
        run: exit 1

      - name: Run dbt run (Run data transformations on the catalog_test environment)
        run: dbt run --profiles-dir ~/.dbt

        