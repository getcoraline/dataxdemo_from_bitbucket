name: dbt main Merge Actions

on:
  pull_request:
    types:
      - closed
    branches:
      - main
jobs:
  dbt-build-and-generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install dbt-core dbt-databricks
          pip install "openmetadata-ingestion[dbt]==1.5.5"
          pip install paramiko

      - name: Create dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          echo "
          dataxdemo:
            target: prod
            outputs:
              prod:
                type: databricks
                catalog: catalog_main
                schema: default
                host: ${{ secrets.DATABRICKS_HOST }}
                http_path: ${{ secrets.DATABRICKS_HTTP_PATH }}
                token: ${{ secrets.DATABRICKS_TOKEN }}
                threads: 4
          " > ~/.dbt/profiles.yml

      - name: Run dbt debug
        run: dbt debug --profiles-dir ~/.dbt

      - name: Run dbt deps
        run: dbt deps --profiles-dir ~/.dbt

      - name: Run dbt build
        run: dbt build --profiles-dir ~/.dbt

      - name: Generate dbt docs
        run: dbt docs generate --profiles-dir ~/.dbt

      - name: Transfer files to OpenMetadata VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.OPENMETADATA_VM_SSH_KEY }}
          VM_USER: ${{ secrets.OPENMETADATA_VM_USER }}
          VM_HOST: ${{ secrets.OPENMETADATA_VM_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -r target/* ${VM_USER}@${VM_HOST}:/home/vmadmin/openmetadata-docker/dbt_files
          rm ~/.ssh/id_rsa

      - name: Update OpenMetadata config
        run: |
          sed -i 's|${{ github.workspace }}/target/|/home/vmadmin/openmetadata-docker/dbt_files|g' openmetadata_config.yaml

      - name: Run OpenMetadata ingestion
        env:
          OPENMETADATA_JWT_TOKEN: ${{ secrets.OPENMETADATA_JWT_TOKEN }}
        run: |
          python -m metadata ingest -c ${{ github.workspace }}/openmetadata_config.yaml

