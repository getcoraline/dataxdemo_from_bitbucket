{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.7", "generated_at": "2024-10-03T06:30:10.817853Z", "invocation_id": "a3b1f1c2-c523-4b5b-bdc8-086d636abd8b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:19.775442Z", "completed_at": "2024-10-03T06:29:19.828300Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:19.842035Z", "completed_at": "2024-10-03T06:29:23.498592Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.7425899505615234, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d2d2-1c51-81a5-5ac42111a555"}, "message": "OK", "failures": null, "unique_id": "model.dataxdemo.stg_jaffle_data__orders", "compiled": true, "compiled_code": "SELECT\n    id,\n    customer as customer_id,\n    ordered_at,\n    store_id,\n    subtotal,\n    tax_paid,\n    order_total\nFROM `jaffle_data`.`default`.`orders`", "relation_name": "`catalog_main`.`default`.`stg_jaffle_data__orders`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:19.766264Z", "completed_at": "2024-10-03T06:29:19.828624Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:19.845098Z", "completed_at": "2024-10-03T06:29:23.499636Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.7455179691314697, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d282-1b10-a81e-df7f7b877909"}, "message": "OK", "failures": null, "unique_id": "model.dataxdemo.stg_jaffle_data__customers", "compiled": true, "compiled_code": "SELECT\n    id,\n    name\nFROM `jaffle_data`.`default`.`customers`", "relation_name": "`catalog_main`.`default`.`stg_jaffle_data__customers`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:19.778514Z", "completed_at": "2024-10-03T06:29:19.828483Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:19.843644Z", "completed_at": "2024-10-03T06:29:23.503514Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.744475841522217, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d2c6-1c52-9d19-b1557ef71fdb"}, "message": "OK", "failures": null, "unique_id": "model.dataxdemo.stg_jaffle_data__products", "compiled": true, "compiled_code": "SELECT\n    sku,\n    name,\n    type,\n    price,\n    COALESCE(NULLIF(description, ''), 'No description') AS description\nFROM `jaffle_data`.`default`.`products`", "relation_name": "`catalog_main`.`default`.`stg_jaffle_data__products`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:19.772726Z", "completed_at": "2024-10-03T06:29:19.828051Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:19.828758Z", "completed_at": "2024-10-03T06:29:23.545053Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.7849831581115723, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d2c7-1501-8d17-1f1145957a7e"}, "message": "OK", "failures": null, "unique_id": "model.dataxdemo.stg_jaffle_data__items", "compiled": true, "compiled_code": "SELECT\n    id,\n    order_id,\n    sku\nFROM `jaffle_data`.`default`.`items`", "relation_name": "`catalog_main`.`default`.`stg_jaffle_data__items`"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:23.514362Z", "completed_at": "2024-10-03T06:29:23.529207Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:23.538917Z", "completed_at": "2024-10-03T06:29:25.200592Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6920597553253174, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d4bd-132a-a849-63f3f938e8d0"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__orders_order_total__0__False.e5c4cf0b8f", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_total >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__orders`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:23.550894Z", "completed_at": "2024-10-03T06:29:23.554019Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:23.554208Z", "completed_at": "2024-10-03T06:29:25.228592Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6824548244476318, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d4ba-1bfd-b987-b8d2996083b4"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__orders_tax_paid__0__False.6350fad164", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and tax_paid >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__orders`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:23.525371Z", "completed_at": "2024-10-03T06:29:23.529428Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:23.540485Z", "completed_at": "2024-10-03T06:29:25.231423Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7221779823303223, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d4bd-1367-ad7e-f67bb237b127"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__orders_subtotal__0__False.10681f0be3", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and subtotal >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__orders`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:23.518987Z", "completed_at": "2024-10-03T06:29:23.528974Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:23.529607Z", "completed_at": "2024-10-03T06:29:25.851302Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.341531991958618, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d4ba-1285-9300-c805fc261650"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__orders_ordered_at___current_timestamp____2016_09_01_.7b1e8c34b3", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ordered_at >= '2016-09-01' and ordered_at <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__orders`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:25.244562Z", "completed_at": "2024-10-03T06:29:25.883049Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:25.883537Z", "completed_at": "2024-10-03T06:29:26.701305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4669549465179443, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d61e-17eb-8324-d9ce001f8a91"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_customer_id__string.5b5d1d139b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CUSTOMER_ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:25.237683Z", "completed_at": "2024-10-03T06:29:25.890146Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:25.890553Z", "completed_at": "2024-10-03T06:29:26.739503Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5069310665130615, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d61f-1fdb-a8e8-521ac0deec52"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__customers_name__string.0bbf0a184b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:25.214809Z", "completed_at": "2024-10-03T06:29:25.893528Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:25.893941Z", "completed_at": "2024-10-03T06:29:26.747418Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5450670719146729, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d620-1259-a851-51f477272ab0"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__customers_id__string.34a2215105", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:25.854772Z", "completed_at": "2024-10-03T06:29:26.361489Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:26.362087Z", "completed_at": "2024-10-03T06:29:26.958594Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1076667308807373, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d664-168b-bceb-ad8e85969331"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_id__string.f0ed3fca30", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:26.707661Z", "completed_at": "2024-10-03T06:29:27.095466Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:27.096116Z", "completed_at": "2024-10-03T06:29:27.502657Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7990307807922363, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d6d7-1fd1-9429-31d6b31d611c"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_order_total__bigint.9d0e28da5b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_TOTAL'\n            and\n            relation_column_type not in ('BIGINT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:26.748306Z", "completed_at": "2024-10-03T06:29:27.203210Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:27.204084Z", "completed_at": "2024-10-03T06:29:27.662571Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9190099239349365, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d6ec-102e-a0a3-92515126e17d"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_ordered_at__timestamp.b81430b8e6", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDERED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:26.967238Z", "completed_at": "2024-10-03T06:29:27.398450Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:27.398956Z", "completed_at": "2024-10-03T06:29:27.750945Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7876651287078857, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d703-16b3-906f-204e1b6cc7b6"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_subtotal__bigint.a691f7771b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SUBTOTAL'\n            and\n            relation_column_type not in ('BIGINT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:26.759049Z", "completed_at": "2024-10-03T06:29:27.203602Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:27.206955Z", "completed_at": "2024-10-03T06:29:27.792113Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.036013126373291, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d6e8-18b7-ac10-77ae51d1ad0d"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_store_id__string.2ed4326a30", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'STORE_ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:27.510058Z", "completed_at": "2024-10-03T06:29:27.953745Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:27.954264Z", "completed_at": "2024-10-03T06:29:28.257342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7511851787567139, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d756-188d-a442-cd97a98ea1c3"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_tax_paid__bigint.2ae5b236c5", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TAX_PAID'\n            and\n            relation_column_type not in ('BIGINT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:27.756372Z", "completed_at": "2024-10-03T06:29:27.765203Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:27.765562Z", "completed_at": "2024-10-03T06:29:28.413683Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6606240272521973, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d738-1dd9-9807-4e6c2aea0b6d"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__customers_id.100fb11c77", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `catalog_main`.`default`.`stg_jaffle_data__customers`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:27.670125Z", "completed_at": "2024-10-03T06:29:27.681087Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:27.681491Z", "completed_at": "2024-10-03T06:29:28.437521Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.771198034286499, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d72d-1baf-83c6-6f3414eaaaf6"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_not_be_null_stg_jaffle_data__customers_name.4f24d4902e", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  name is not null as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__customers`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:27.797319Z", "completed_at": "2024-10-03T06:29:27.806102Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:27.806569Z", "completed_at": "2024-10-03T06:29:28.440378Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6464941501617432, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d744-1993-9c12-f1082c372fa2"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__orders_customer_id.c59546ee04", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `catalog_main`.`default`.`stg_jaffle_data__orders`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:28.264407Z", "completed_at": "2024-10-03T06:29:28.271657Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:28.272049Z", "completed_at": "2024-10-03T06:29:28.665111Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.404160737991333, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d789-1fe2-ad18-5fa2ddaf3f43"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__orders_id.352f2d7a84", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `catalog_main`.`default`.`stg_jaffle_data__orders`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:28.419806Z", "completed_at": "2024-10-03T06:29:28.432229Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:28.433255Z", "completed_at": "2024-10-03T06:29:28.910322Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.49463701248168945, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d7a2-1663-89a0-7a653613c9ee"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__orders_ordered_at.38bc7e1fd1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ordered_at\nfrom `catalog_main`.`default`.`stg_jaffle_data__orders`\nwhere ordered_at is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:28.447338Z", "completed_at": "2024-10-03T06:29:28.457698Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:28.457925Z", "completed_at": "2024-10-03T06:29:28.959863Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5170412063598633, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d7a4-17c7-8596-48ac5386cd23"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.unique_stg_jaffle_data__customers_id.3c67ccf3c1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`stg_jaffle_data__customers`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:28.454617Z", "completed_at": "2024-10-03T06:29:28.459901Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:28.460164Z", "completed_at": "2024-10-03T06:29:28.978752Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5334999561309814, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d7a4-1629-b6c9-448ea7a63fd9"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.unique_stg_jaffle_data__orders_id.909cc2500b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`stg_jaffle_data__orders`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:28.671506Z", "completed_at": "2024-10-03T06:29:28.679676Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:28.680066Z", "completed_at": "2024-10-03T06:29:29.376531Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7089719772338867, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d7cd-1305-ae19-e8a4c5cae058"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__products_price__0__True.0e0af32254", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and price > 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__products`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:28.917406Z", "completed_at": "2024-10-03T06:29:29.348906Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:29.349287Z", "completed_at": "2024-10-03T06:29:29.686333Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.773064136505127, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d82c-1ded-94dd-9d025bc8c55c"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_description__string.e6815a8f34", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DESCRIPTION'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:28.964116Z", "completed_at": "2024-10-03T06:29:29.352121Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:29.352494Z", "completed_at": "2024-10-03T06:29:29.690319Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7296528816223145, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d82e-1c45-9eec-a4fe78beb952"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_name__string.2960b0937d", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:28.981835Z", "completed_at": "2024-10-03T06:29:29.414821Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:29.415070Z", "completed_at": "2024-10-03T06:29:29.774738Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7945079803466797, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d839-10cb-b15c-3cbe95d9609c"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_price__bigint.a7b3cf3522", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('BIGINT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:29.380079Z", "completed_at": "2024-10-03T06:29:29.775316Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:29.775545Z", "completed_at": "2024-10-03T06:29:30.065073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6877181529998779, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d86c-1dba-ab34-b011bac41758"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_sku__string.9a48b6221b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SKU'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:29.779266Z", "completed_at": "2024-10-03T06:29:29.782161Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:29.782330Z", "completed_at": "2024-10-03T06:29:30.268460Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4926798343658447, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d86d-142a-9858-49048240ffb6"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__products_name.74f8ada786", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom `catalog_main`.`default`.`stg_jaffle_data__products`\nwhere name is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:29.697948Z", "completed_at": "2024-10-03T06:29:30.133320Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:30.136208Z", "completed_at": "2024-10-03T06:29:30.452095Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7600610256195068, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d8a8-14a2-b82d-6fe16b06c71b"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_type__string.5da970e07a", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TYPE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:30.072084Z", "completed_at": "2024-10-03T06:29:30.080480Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:30.080831Z", "completed_at": "2024-10-03T06:29:30.520622Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.45188236236572266, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d89a-1eb4-8a51-62484fd6866b"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__products_price.2a44293b6a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `catalog_main`.`default`.`stg_jaffle_data__products`\nwhere price is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:30.275633Z", "completed_at": "2024-10-03T06:29:30.282130Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:30.282435Z", "completed_at": "2024-10-03T06:29:30.692843Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.42094898223876953, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d8be-199c-b131-dfbc8ff4cdf3"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__products_sku.88fb35f076", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku\nfrom `catalog_main`.`default`.`stg_jaffle_data__products`\nwhere sku is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:30.458345Z", "completed_at": "2024-10-03T06:29:30.464808Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:30.465192Z", "completed_at": "2024-10-03T06:29:30.814877Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.35939884185791016, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d8d3-1552-922b-aad67f7d6302"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.unique_stg_jaffle_data__products_sku.7a42d252d8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sku as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`stg_jaffle_data__products`\nwhere sku is not null\ngroup by sku\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:30.525227Z", "completed_at": "2024-10-03T06:29:30.898536Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:30.898816Z", "completed_at": "2024-10-03T06:29:31.142944Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6204521656036377, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d916-102b-bf18-129da4a86407"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__items_id__string.15cc788b10", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:30.698654Z", "completed_at": "2024-10-03T06:29:31.108147Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:31.108922Z", "completed_at": "2024-10-03T06:29:31.429536Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7347450256347656, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d93b-18e6-ab10-ac9a0f2fba96"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__items_order_id__string.9819026f71", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:30.817758Z", "completed_at": "2024-10-03T06:29:31.218196Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:31.218523Z", "completed_at": "2024-10-03T06:29:31.543560Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7296199798583984, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d94c-1497-8a61-670a1055ea3f"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__items_sku__string.47ee20ec8d", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SKU'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:31.147382Z", "completed_at": "2024-10-03T06:29:31.153601Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:31.153869Z", "completed_at": "2024-10-03T06:29:31.758966Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6141078472137451, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d93e-1127-959a-def0918c0fc6"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__items_id.b4ba39df36", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `catalog_main`.`default`.`stg_jaffle_data__items`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:31.436017Z", "completed_at": "2024-10-03T06:29:31.446027Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:31.446350Z", "completed_at": "2024-10-03T06:29:31.989545Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5573868751525879, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d96b-16a4-bec2-01e57626ad2c"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__items_order_id.c2a29ae0da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `catalog_main`.`default`.`stg_jaffle_data__items`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:29.705751Z", "completed_at": "2024-10-03T06:29:30.133028Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:30.133604Z", "completed_at": "2024-10-03T06:29:32.001704Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.3067269325256348, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d8a4-10e6-b184-42448fff8d6b"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_jaffle_data__products_sku__name__type__price__description.86308bc330", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('SKU' as string) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('NAME' as string) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('TYPE' as string) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('PRICE' as string) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('DESCRIPTION' as string) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('SKU' as string) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('NAME' as string) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('TYPE' as string) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('PRICE' as string) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('DESCRIPTION' as string) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:31.551606Z", "completed_at": "2024-10-03T06:29:31.557877Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:31.558133Z", "completed_at": "2024-10-03T06:29:32.138514Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5907032489776611, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d97d-1e98-a83f-c9ddb0380384"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__items_sku.cff13ad356", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku\nfrom `catalog_main`.`default`.`stg_jaffle_data__items`\nwhere sku is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:31.763003Z", "completed_at": "2024-10-03T06:29:31.767967Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:31.768228Z", "completed_at": "2024-10-03T06:29:32.251735Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4912252426147461, "adapter_response": {"_message": "OK", "query_id": "01ef8150-d99d-1c72-abec-d71205603f51"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.unique_stg_jaffle_data__items_id.9f80c479d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`stg_jaffle_data__items`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:32.256535Z", "completed_at": "2024-10-03T06:29:32.256539Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:32.256761Z", "completed_at": "2024-10-03T06:29:35.707745Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.4545528888702393, "adapter_response": {"_message": "OK", "query_id": "01ef8150-db2b-1932-a236-43ccc0e7ad24"}, "message": null, "failures": 0, "unique_id": "unit_test.dataxdemo.int_jaffle_data__order_items.test_order_items_data_integrity", "compiled": true, "compiled_code": "WITH  __dbt__cte__stg_jaffle_data__orders as (\n\n-- Fixture for stg_jaffle_data__orders\nselect cast(101 as string)\n as id, cast(1 as string)\n as customer_id, cast('2023-01-10' as timestamp)\n as ordered_at, cast(1 as string)\n as store_id, cast(null as bigint) as subtotal, cast(null as bigint) as tax_paid, cast(null as bigint) as order_total\nunion all\nselect cast(102 as string)\n as id, cast(1 as string)\n as customer_id, cast('2023-02-15' as timestamp)\n as ordered_at, cast(1 as string)\n as store_id, cast(null as bigint) as subtotal, cast(null as bigint) as tax_paid, cast(null as bigint) as order_total\nunion all\nselect cast(201 as string)\n as id, cast(2 as string)\n as customer_id, cast('2023-03-10' as timestamp)\n as ordered_at, cast(2 as string)\n as store_id, cast(null as bigint) as subtotal, cast(null as bigint) as tax_paid, cast(null as bigint) as order_total\n),  __dbt__cte__stg_jaffle_data__items as (\n\n-- Fixture for stg_jaffle_data__items\nselect cast(null as string) as id, cast(101 as string)\n as order_id, cast('SKU001' as string)\n as sku\nunion all\nselect cast(null as string) as id, cast(102 as string)\n as order_id, cast('SKU002' as string)\n as sku\nunion all\nselect cast(null as string) as id, cast(201 as string)\n as order_id, cast('SKU003' as string)\n as sku\n),  __dbt__cte__stg_jaffle_data__products as (\n\n-- Fixture for stg_jaffle_data__products\nselect cast('SKU001' as string)\n as sku, cast('Product A' as string)\n as name, cast('Type A' as string)\n as type, cast(1500 as bigint)\n as price, cast(null as string) as description\nunion all\nselect cast('SKU002' as string)\n as sku, cast('Product B' as string)\n as name, cast('Type B' as string)\n as type, cast(2000 as bigint)\n as price, cast(null as string) as description\nunion all\nselect cast('SKU003' as string)\n as sku, cast('Product C' as string)\n as name, cast('Type C' as string)\n as type, cast(800 as bigint)\n as price, cast(null as string) as description\n), order_items AS (\n    SELECT\n        o.id AS order_id,\n        o.customer_id,\n        o.ordered_at,\n        o.store_id,\n        i.sku,\n        p.name AS product_name,\n        p.type AS product_type,\n        p.price AS product_price\n    FROM __dbt__cte__stg_jaffle_data__orders o\n    JOIN __dbt__cte__stg_jaffle_data__items i ON o.id = i.order_id\n    JOIN __dbt__cte__stg_jaffle_data__products p ON i.sku = p.sku\n)\n\nSELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY ordered_at) AS customer_order_seq,\n    LAG(product_type) OVER (PARTITION BY customer_id ORDER BY ordered_at) AS previous_product_type\nFROM order_items", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:35.714013Z", "completed_at": "2024-10-03T06:29:35.720861Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:35.721253Z", "completed_at": "2024-10-03T06:29:36.771936Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.061608076095581, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dbfa-14dd-b02c-8e1bcd71c6c3"}, "message": "OK", "failures": null, "unique_id": "model.dataxdemo.int_jaffle_data__order_items", "compiled": true, "compiled_code": "WITH order_items AS (\n    SELECT\n        o.id AS order_id,\n        o.customer_id,\n        o.ordered_at,\n        o.store_id,\n        i.sku,\n        p.name AS product_name,\n        p.type AS product_type,\n        p.price AS product_price\n    FROM `catalog_main`.`default`.`stg_jaffle_data__orders` o\n    JOIN `catalog_main`.`default`.`stg_jaffle_data__items` i ON o.id = i.order_id\n    JOIN `catalog_main`.`default`.`stg_jaffle_data__products` p ON i.sku = p.sku\n)\n\nSELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY ordered_at) AS customer_order_seq,\n    LAG(product_type) OVER (PARTITION BY customer_id ORDER BY ordered_at) AS previous_product_type\nFROM order_items", "relation_name": "`catalog_main`.`default`.`int_jaffle_data__order_items`"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:36.819621Z", "completed_at": "2024-10-03T06:29:36.834539Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:36.834751Z", "completed_at": "2024-10-03T06:29:37.771076Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9922621250152588, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dca5-1dba-9f1e-44336a40127e"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_value_lengths_to_be_between_int_jaffle_data__order_items_product_name__1.4f466644ea", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        product_name\n    ) >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:36.829732Z", "completed_at": "2024-10-03T06:29:36.836212Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:36.836600Z", "completed_at": "2024-10-03T06:29:37.812371Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0349397659301758, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dca4-1fec-b482-f3047bf76638"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__order_items_customer_order_seq__1__False.52e3582bcb", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and customer_order_seq >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:36.811004Z", "completed_at": "2024-10-03T06:29:36.832658Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:36.832937Z", "completed_at": "2024-10-03T06:29:37.814856Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0387420654296875, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dca2-1908-9e2e-1f6a8d4f3333"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.customer_order_sequence", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 customer_order_seq \u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e15\u0e32\u0e21\u0e25\u0e33\u0e14\u0e31\u0e1a\u0e40\u0e27\u0e25\u0e32\u0e02\u0e2d\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\nWITH order_validation AS (\n    SELECT \n        customer_id,\n        order_id,\n        customer_order_seq,\n        ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY ordered_at) AS calculated_order_seq\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n)\nSELECT *\nFROM order_validation\nWHERE customer_order_seq != calculated_order_seq", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:36.826636Z", "completed_at": "2024-10-03T06:29:36.836404Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:36.838239Z", "completed_at": "2024-10-03T06:29:37.816948Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0377449989318848, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dca8-1362-b0f5-38e7c1bb9c27"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_value_lengths_to_be_between_int_jaffle_data__order_items_sku__1.2a9d335aaf", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        sku\n    ) >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:37.828338Z", "completed_at": "2024-10-03T06:29:37.837420Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:37.837672Z", "completed_at": "2024-10-03T06:29:38.554279Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7345240116119385, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dd3f-1320-8d5d-cedb560d62ae"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__order_items_store_id__1.902515a353", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and store_id >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:37.823879Z", "completed_at": "2024-10-03T06:29:37.835600Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:37.835834Z", "completed_at": "2024-10-03T06:29:38.583798Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7667839527130127, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dd3e-1aee-b8c5-907d05316fd7"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__order_items_product_price__0__True.f6c8be6d08", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and product_price > 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:37.831814Z", "completed_at": "2024-10-03T06:29:37.840233Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:37.840487Z", "completed_at": "2024-10-03T06:29:38.588791Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7687187194824219, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dd3f-19ea-97a0-b2c38d7ecbbb"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_in_set_int_jaffle_data__order_items_product_type__jaffle__beverage.4ff451ff8d", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        product_type as value_field\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nset_values as (\n\n    select\n        cast('jaffle' as string) as value_field\n    union all\n    select\n        cast('beverage' as string) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:37.777596Z", "completed_at": "2024-10-03T06:29:37.788590Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:37.789011Z", "completed_at": "2024-10-03T06:29:38.819090Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0452890396118164, "adapter_response": {"_message": "OK", "query_id": "01ef8150-dd32-1b2f-a627-d56d8e4866a7"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__order_items_ordered_at___current_timestamp____2016_09_01_.39d106b85f", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ordered_at >= '2016-09-01' and ordered_at <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:38.605152Z", "completed_at": "2024-10-03T06:29:38.610278Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:38.610515Z", "completed_at": "2024-10-03T06:29:39.131704Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5408229827880859, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ddaf-1cf1-9c6d-3fc87f1f4733"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_row_count_to_equal_int_jaffle_data__order_items_90183.4cd42b2e47", "compiled": true, "compiled_code": "\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(*) = 90183\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:38.560429Z", "completed_at": "2024-10-03T06:29:38.571637Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:38.572063Z", "completed_at": "2024-10-03T06:29:39.139584Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5833041667938232, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ddae-12b8-ab7e-2f4a76702f77"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_null_int_jaffle_data__order_items_previous_product_type__customer_order_seq_1.3fbb65c1b4", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  previous_product_type is null as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    where\n        customer_order_seq = 1\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:38.824915Z", "completed_at": "2024-10-03T06:29:38.831400Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:38.831769Z", "completed_at": "2024-10-03T06:29:39.414574Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5931260585784912, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ddd6-1297-91fe-fef365fd533f"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_customer_id.3b72d60c7c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:39.154220Z", "completed_at": "2024-10-03T06:29:39.158406Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:39.158977Z", "completed_at": "2024-10-03T06:29:39.747931Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6004910469055176, "adapter_response": {"_message": "OK", "query_id": "01ef8150-de06-11c4-9de2-0a9df8aed347"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_order_id.e5512f14e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:39.141716Z", "completed_at": "2024-10-03T06:29:39.150141Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:39.150712Z", "completed_at": "2024-10-03T06:29:39.772921Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.6373429298400879, "adapter_response": {"_message": "OK", "query_id": "01ef8150-de06-1200-aacd-2a86a8974a05"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_customer_order_seq.027f6ab0f1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_order_seq\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere customer_order_seq is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:38.595340Z", "completed_at": "2024-10-03T06:29:38.974481Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:38.974946Z", "completed_at": "2024-10-03T06:29:39.777058Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.187439203262329, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ddec-1cb4-b327-1cba20e11f82"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_columns_to_match_ordered_list_int_jaffle_data__order_items_order_id__customer_id__ordered_at__store_id__sku__product_name__product_type__product_price__customer_order_seq__previous_product_type.b7869df416", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('ORDER_ID' as string) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_ID' as string) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('ORDERED_AT' as string) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('STORE_ID' as string) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('SKU' as string) as relation_column\n        union all\n        \n        select\n            6 as relation_column_idx,\n            cast('PRODUCT_NAME' as string) as relation_column\n        union all\n        \n        select\n            7 as relation_column_idx,\n            cast('PRODUCT_TYPE' as string) as relation_column\n        union all\n        \n        select\n            8 as relation_column_idx,\n            cast('PRODUCT_PRICE' as string) as relation_column\n        union all\n        \n        select\n            9 as relation_column_idx,\n            cast('CUSTOMER_ORDER_SEQ' as string) as relation_column\n        union all\n        \n        select\n            10 as relation_column_idx,\n            cast('PREVIOUS_PRODUCT_TYPE' as string) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('ORDER_ID' as string) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_ID' as string) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('ORDERED_AT' as string) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('STORE_ID' as string) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('SKU' as string) as input_column\n        union all\n        \n        select\n            6 as input_column_idx,\n            cast('PRODUCT_NAME' as string) as input_column\n        union all\n        \n        select\n            7 as input_column_idx,\n            cast('PRODUCT_TYPE' as string) as input_column\n        union all\n        \n        select\n            8 as input_column_idx,\n            cast('PRODUCT_PRICE' as string) as input_column\n        union all\n        \n        select\n            9 as input_column_idx,\n            cast('CUSTOMER_ORDER_SEQ' as string) as input_column\n        union all\n        \n        select\n            10 as input_column_idx,\n            cast('PREVIOUS_PRODUCT_TYPE' as string) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:39.421528Z", "completed_at": "2024-10-03T06:29:39.428986Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:39.429350Z", "completed_at": "2024-10-03T06:29:39.991167Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5741109848022461, "adapter_response": {"_message": "OK", "query_id": "01ef8150-de30-1009-8a99-c4085f581a94"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_ordered_at.db9aeaeaad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ordered_at\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere ordered_at is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:39.754309Z", "completed_at": "2024-10-03T06:29:39.766335Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:39.766736Z", "completed_at": "2024-10-03T06:29:40.297142Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5461809635162354, "adapter_response": {"_message": "OK", "query_id": "01ef8150-de62-1f1e-a6be-5e22898be16c"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_product_name.5c27b3e60a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere product_name is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:39.782263Z", "completed_at": "2024-10-03T06:29:39.789927Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:39.790177Z", "completed_at": "2024-10-03T06:29:40.319162Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5417709350585938, "adapter_response": {"_message": "OK", "query_id": "01ef8150-de6c-10e7-8278-f8bba17f76df"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_product_price.0f74b87396", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_price\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere product_price is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:39.997034Z", "completed_at": "2024-10-03T06:29:40.002220Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:40.002570Z", "completed_at": "2024-10-03T06:29:40.507499Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.513944149017334, "adapter_response": {"_message": "OK", "query_id": "01ef8150-de83-13f1-b70c-8b4058be8f47"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.order_date_consistency", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e19 \u0e44\u0e21\u0e48\u0e40\u0e01\u0e34\u0e14\u0e02\u0e36\u0e49\u0e19\u0e01\u0e48\u0e2d\u0e19\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e04\u0e23\u0e31\u0e49\u0e07\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32\nWITH order_validation AS (\n    SELECT \n        customer_id,\n        order_id,\n        ordered_at,\n        LAG(ordered_at) OVER (PARTITION BY customer_id ORDER BY ordered_at) AS prev_order_date\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n)\nSELECT *\nFROM order_validation\nWHERE prev_order_date IS NOT NULL AND ordered_at < prev_order_date", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:39.786794Z", "completed_at": "2024-10-03T06:29:39.792203Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:39.792446Z", "completed_at": "2024-10-03T06:29:40.524850Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7438459396362305, "adapter_response": {"_message": "OK", "query_id": "01ef8150-de6b-13cc-ba0e-44b5ce9f95b8"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_sku.004f061050", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere sku is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:40.304096Z", "completed_at": "2024-10-03T06:29:40.312800Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:40.314082Z", "completed_at": "2024-10-03T06:29:40.826885Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5258231163024902, "adapter_response": {"_message": "OK", "query_id": "01ef8150-deb7-1503-818b-9e31fe5599e5"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.previous_product_type_first_and_non_first_order", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 previous_product_type \u0e40\u0e1b\u0e47\u0e19 NULL \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e41\u0e23\u0e01\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19\n-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 previous_product_type \u0e44\u0e21\u0e48\u0e40\u0e1b\u0e47\u0e19 NULL \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e41\u0e23\u0e01\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\nWITH order_validation AS (\n    SELECT \n        customer_id,\n        order_id,\n        customer_order_seq,\n        previous_product_type\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n)\nSELECT *\nFROM order_validation\nWHERE (previous_product_type IS NULL AND customer_order_seq != 1)\n   OR (previous_product_type IS NOT NULL AND customer_order_seq = 1)", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:40.830604Z", "completed_at": "2024-10-03T06:29:40.830611Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:40.830790Z", "completed_at": "2024-10-03T06:29:43.585252Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.75809907913208, "adapter_response": {"_message": "OK", "query_id": "01ef8150-df96-14f2-892c-2c9083a442f5"}, "message": null, "failures": 0, "unique_id": "unit_test.dataxdemo.int_jaffle_data__customer_order_history.test_customer_order_history_segments", "compiled": true, "compiled_code": "WITH  __dbt__cte__int_jaffle_data__order_items as (\n\n-- Fixture for int_jaffle_data__order_items\nselect cast(101 as string)\n as order_id, cast(1 as string)\n as customer_id, cast('2023-01-10' as timestamp)\n as ordered_at, cast(null as string) as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast(null as string) as product_type, cast(1500 as bigint)\n as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\nunion all\nselect cast(102 as string)\n as order_id, cast(1 as string)\n as customer_id, cast('2023-02-15' as timestamp)\n as ordered_at, cast(null as string) as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast(null as string) as product_type, cast(2000 as bigint)\n as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\nunion all\nselect cast(201 as string)\n as order_id, cast(2 as string)\n as customer_id, cast('2023-03-10' as timestamp)\n as ordered_at, cast(null as string) as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast(null as string) as product_type, cast(800 as bigint)\n as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\n), customer_orders AS (\n    SELECT\n        customer_id,\n        COUNT(DISTINCT order_id) AS total_orders,\n        SUM(product_price) AS total_spent,\n        ROUND(AVG(product_price), 2) AS avg_order_value,\n        MIN(ordered_at) AS first_order_date,\n        MAX(ordered_at) AS last_order_date,\n        DATEDIFF(DAY, MIN(ordered_at), MAX(ordered_at)) AS customer_lifetime_days\n    FROM __dbt__cte__int_jaffle_data__order_items\n    GROUP BY 1\n)\n\nSELECT\n    *,\n    CASE \n        WHEN total_orders >= 20 AND total_spent >= 5000 THEN 'VIP'\n        WHEN total_orders >= 10 OR total_spent >= 1000 THEN 'Regular'\n        ELSE 'New'\n    END AS customer_segment\nFROM customer_orders", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:43.593609Z", "completed_at": "2024-10-03T06:29:43.599308Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:43.599776Z", "completed_at": "2024-10-03T06:29:44.719150Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1297600269317627, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e0b1-149d-a3ab-33518879485d"}, "message": "OK", "failures": null, "unique_id": "model.dataxdemo.int_jaffle_data__customer_order_history", "compiled": true, "compiled_code": "WITH customer_orders AS (\n    SELECT\n        customer_id,\n        COUNT(DISTINCT order_id) AS total_orders,\n        SUM(product_price) AS total_spent,\n        ROUND(AVG(product_price), 2) AS avg_order_value,\n        MIN(ordered_at) AS first_order_date,\n        MAX(ordered_at) AS last_order_date,\n        DATEDIFF(DAY, MIN(ordered_at), MAX(ordered_at)) AS customer_lifetime_days\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n    GROUP BY 1\n)\n\nSELECT\n    *,\n    CASE \n        WHEN total_orders >= 20 AND total_spent >= 5000 THEN 'VIP'\n        WHEN total_orders >= 10 OR total_spent >= 1000 THEN 'Regular'\n        ELSE 'New'\n    END AS customer_segment\nFROM customer_orders", "relation_name": "`catalog_main`.`default`.`int_jaffle_data__customer_order_history`"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:44.737402Z", "completed_at": "2024-10-03T06:29:44.758101Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:44.758469Z", "completed_at": "2024-10-03T06:29:45.602517Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8820078372955322, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e160-1703-8a80-4321cb3925ed"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.accepted_values_int_jaffle_data__customer_order_history_customer_segment__VIP__Regular__New.8ff7abaedf", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_segment as value_field,\n        count(*) as n_records\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    group by customer_segment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'VIP','Regular','New'\n)\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:44.748607Z", "completed_at": "2024-10-03T06:29:44.762447Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:44.762766Z", "completed_at": "2024-10-03T06:29:45.614728Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8862640857696533, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e15f-149a-afed-d5b826c5743d"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_customer_lifetime_days__0__False.0b9abec2c8", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and customer_lifetime_days >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:44.743277Z", "completed_at": "2024-10-03T06:29:44.760157Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:44.760458Z", "completed_at": "2024-10-03T06:29:45.687366Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9586181640625, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e15f-1e2e-aaa6-7b1beac8f116"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_avg_order_value__0__False.e7780505f1", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and avg_order_value >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:45.689719Z", "completed_at": "2024-10-03T06:29:45.777225Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:45.777523Z", "completed_at": "2024-10-03T06:29:46.339610Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6587772369384766, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e1fa-1592-a322-2e18ea4cc5b5"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_total_spent__0__False.c52184020a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_spent >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:45.627159Z", "completed_at": "2024-10-03T06:29:45.632008Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:45.633043Z", "completed_at": "2024-10-03T06:29:46.349409Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7299361228942871, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e1e1-1f8a-b22c-cf2bb2ff7f46"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_total_orders__1__False.50acc358d7", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_orders >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:46.364716Z", "completed_at": "2024-10-03T06:29:46.376086Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:46.376569Z", "completed_at": "2024-10-03T06:29:47.019023Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6607968807220459, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e25e-1067-a93d-84f2a9cce94f"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_in_set_int_jaffle_data__customer_order_history_customer_segment__VIP__Regular__New.6ea5a06a4d", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        customer_segment as value_field\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nset_values as (\n\n    select\n        cast('VIP' as string) as value_field\n    union all\n    select\n        cast('Regular' as string) as value_field\n    union all\n    select\n        cast('New' as string) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:46.369891Z", "completed_at": "2024-10-03T06:29:46.831224Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:46.831784Z", "completed_at": "2024-10-03T06:29:47.380976Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0197241306304932, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e298-1bc3-a4d2-0ffdc061bc3f"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_columns_to_match_ordered_list_int_jaffle_data__customer_order_history_customer_id__total_orders__total_spent__avg_order_value__first_order_date__last_order_date__customer_lifetime_days__customer_segment.13ae131a24", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('CUSTOMER_ID' as string) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('TOTAL_ORDERS' as string) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('TOTAL_SPENT' as string) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('AVG_ORDER_VALUE' as string) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('FIRST_ORDER_DATE' as string) as relation_column\n        union all\n        \n        select\n            6 as relation_column_idx,\n            cast('LAST_ORDER_DATE' as string) as relation_column\n        union all\n        \n        select\n            7 as relation_column_idx,\n            cast('CUSTOMER_LIFETIME_DAYS' as string) as relation_column\n        union all\n        \n        select\n            8 as relation_column_idx,\n            cast('CUSTOMER_SEGMENT' as string) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('CUSTOMER_ID' as string) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('TOTAL_ORDERS' as string) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('TOTAL_SPENT' as string) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('AVG_ORDER_VALUE' as string) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('FIRST_ORDER_DATE' as string) as input_column\n        union all\n        \n        select\n            6 as input_column_idx,\n            cast('LAST_ORDER_DATE' as string) as input_column\n        union all\n        \n        select\n            7 as input_column_idx,\n            cast('CUSTOMER_LIFETIME_DAYS' as string) as input_column\n        union all\n        \n        select\n            8 as input_column_idx,\n            cast('CUSTOMER_SEGMENT' as string) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:47.025640Z", "completed_at": "2024-10-03T06:29:47.033450Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:47.033840Z", "completed_at": "2024-10-03T06:29:47.795817Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7737381458282471, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e2b5-1942-b9ac-03b171a8a118"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_row_count_to_equal_int_jaffle_data__customer_order_history_930.db7a9d72f8", "compiled": true, "compiled_code": "\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(*) = 930\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:47.387796Z", "completed_at": "2024-10-03T06:29:47.395246Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:47.395612Z", "completed_at": "2024-10-03T06:29:47.870642Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.48638010025024414, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e2eb-184c-8fee-354a12d5597b"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_avg_order_value.4b4e03406a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_order_value\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere avg_order_value is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:47.801809Z", "completed_at": "2024-10-03T06:29:47.808571Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:47.808926Z", "completed_at": "2024-10-03T06:29:48.318637Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5206000804901123, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e32a-1c71-8415-ce49e32c48df"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_customer_id.4043a5caa6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:47.875289Z", "completed_at": "2024-10-03T06:29:47.881172Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:47.881490Z", "completed_at": "2024-10-03T06:29:48.660745Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7887668609619141, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e337-167b-a3a1-b66209409164"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_customer_lifetime_days.115005d738", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_lifetime_days\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere customer_lifetime_days is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:48.324992Z", "completed_at": "2024-10-03T06:29:48.332548Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:48.332923Z", "completed_at": "2024-10-03T06:29:48.857388Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5363011360168457, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e37b-1f9f-8e9e-871036cd61d8"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_customer_segment.8df9d54285", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_segment\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere customer_segment is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:48.666993Z", "completed_at": "2024-10-03T06:29:48.673808Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:48.674137Z", "completed_at": "2024-10-03T06:29:49.214211Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5509288311004639, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e3b1-1e7e-a30d-241f6415d952"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_first_order_date.ba43b25594", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect first_order_date\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere first_order_date is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:44.752655Z", "completed_at": "2024-10-03T06:29:44.765699Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:44.766262Z", "completed_at": "2024-10-03T06:29:49.293513Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 4.564888000488281, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e161-17ff-b0f4-3babccec0ded"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_first_order_date___current_timestamp____2016_09_01_.d2b85ee1bf", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and first_order_date >= '2016-09-01' and first_order_date <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:45.616037Z", "completed_at": "2024-10-03T06:29:45.624868Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:45.625192Z", "completed_at": "2024-10-03T06:29:49.308297Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.6988601684570312, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e1e1-1d1f-981c-932295542b80"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_last_order_date___current_timestamp____2017_01_08_.000b412171", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and last_order_date >= '2017-01-08' and last_order_date <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:48.863971Z", "completed_at": "2024-10-03T06:29:48.874143Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:48.874464Z", "completed_at": "2024-10-03T06:29:49.577108Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7168152332305908, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e3cd-1f36-b7f2-57f94172a9b7"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_last_order_date.cb8bc27dd8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect last_order_date\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere last_order_date is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:49.220584Z", "completed_at": "2024-10-03T06:29:49.227040Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:49.227389Z", "completed_at": "2024-10-03T06:29:49.718316Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5011389255523682, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e404-1304-ade7-c4feac9598e0"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_total_orders.1968a221fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_orders\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere total_orders is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:49.300273Z", "completed_at": "2024-10-03T06:29:49.308616Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:49.309262Z", "completed_at": "2024-10-03T06:29:49.815361Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5201849937438965, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e410-1aff-8dd6-8042a00d150f"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_total_spent.100903c9e8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_spent\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere total_spent is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:49.315911Z", "completed_at": "2024-10-03T06:29:49.319832Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:49.320052Z", "completed_at": "2024-10-03T06:29:49.984183Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6718499660491943, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e413-1142-9aa5-a2bc8e09f843"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.unique_customer_id", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35 customer_id \u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 1 record\nSELECT *\nFROM `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nWHERE customer_id IN (\n    SELECT customer_id\n    FROM `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    GROUP BY customer_id\n    HAVING COUNT(*) > 1\n)", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:49.582856Z", "completed_at": "2024-10-03T06:29:49.589538Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:49.589842Z", "completed_at": "2024-10-03T06:29:50.212307Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6328589916229248, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e440-1024-bf46-8788446bae53"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.unique_int_jaffle_data__customer_order_history_customer_id.d16d952cf3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:50.218899Z", "completed_at": "2024-10-03T06:29:50.218906Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:50.219255Z", "completed_at": "2024-10-03T06:29:52.788422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.5744831562042236, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e5b0-13cd-8121-48f72eeb33b3"}, "message": null, "failures": 0, "unique_id": "unit_test.dataxdemo.mart_jaffle_data__customer_360.test_customer_segment_values", "compiled": true, "compiled_code": "WITH  __dbt__cte__stg_jaffle_data__customers as (\n\n-- Fixture for stg_jaffle_data__customers\nselect cast(1 as string)\n as id, cast('Alice' as string)\n as name\nunion all\nselect cast(2 as string)\n as id, cast('Bob' as string)\n as name\nunion all\nselect cast(3 as string)\n as id, cast('Charlie' as string)\n as name\n),  __dbt__cte__int_jaffle_data__customer_order_history as (\n\n-- Fixture for int_jaffle_data__customer_order_history\nselect cast(1 as string)\n as customer_id, cast(20 as bigint)\n as total_orders, cast(2000 as bigint)\n as total_spent, cast(100 as double)\n as avg_order_value, cast('2023-01-01' as timestamp)\n as first_order_date, cast('2023-07-20' as timestamp)\n as last_order_date, cast(200 as bigint)\n as customer_lifetime_days, cast('VIP' as string)\n as customer_segment\nunion all\nselect cast(2 as string)\n as customer_id, cast(10 as bigint)\n as total_orders, cast(1000 as bigint)\n as total_spent, cast(100 as double)\n as avg_order_value, cast('2023-02-01' as timestamp)\n as first_order_date, cast('2023-07-10' as timestamp)\n as last_order_date, cast(160 as bigint)\n as customer_lifetime_days, cast('Regular' as string)\n as customer_segment\nunion all\nselect cast(3 as string)\n as customer_id, cast(2 as bigint)\n as total_orders, cast(200 as bigint)\n as total_spent, cast(100 as double)\n as avg_order_value, cast('2023-06-01' as timestamp)\n as first_order_date, cast('2023-07-01' as timestamp)\n as last_order_date, cast(30 as bigint)\n as customer_lifetime_days, cast('New' as string)\n as customer_segment\n),  __dbt__cte__int_jaffle_data__order_items as (\n\n-- Fixture for int_jaffle_data__order_items\nselect cast(null as string) as order_id, cast(1 as string)\n as customer_id, cast(null as timestamp) as ordered_at, cast(1 as string)\n as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast('SKU001' as string)\n as product_type, cast(null as bigint) as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\nunion all\nselect cast(null as string) as order_id, cast(2 as string)\n as customer_id, cast(null as timestamp) as ordered_at, cast(1 as string)\n as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast('SKU002' as string)\n as product_type, cast(null as bigint) as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\nunion all\nselect cast(null as string) as order_id, cast(3 as string)\n as customer_id, cast(null as timestamp) as ordered_at, cast(2 as string)\n as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast('SKU003' as string)\n as product_type, cast(null as bigint) as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\n), customer_info AS (\n    SELECT\n        c.id AS customer_id,\n        c.name AS customer_name,\n        coh.total_orders,\n        coh.total_spent,\n        coh.avg_order_value,\n        coh.first_order_date,\n        coh.last_order_date,\n        coh.customer_lifetime_days,\n        coh.customer_segment\n    FROM __dbt__cte__stg_jaffle_data__customers c\n    LEFT JOIN __dbt__cte__int_jaffle_data__customer_order_history coh\n        ON c.id = coh.customer_id\n),\ncustomer_products AS (\n    SELECT\n        customer_id,\n        array_join(collect_set(product_type), ', ') AS product_types_purchased,\n        COUNT(DISTINCT product_type) AS unique_product_types_count\n    FROM __dbt__cte__int_jaffle_data__order_items\n    GROUP BY 1\n),\ncustomer_stores AS (\n    SELECT\n        customer_id,\n        array_join(collect_set(cast(store_id as string)), ', ') AS visited_store_ids,\n        COUNT(DISTINCT store_id) AS unique_stores_visited\n    FROM __dbt__cte__int_jaffle_data__order_items\n    GROUP BY 1\n)\n\nSELECT\n    ci.*,\n    cp.product_types_purchased,\n    cp.unique_product_types_count,\n    cs.visited_store_ids,\n    cs.unique_stores_visited,\n    CASE \n        WHEN ci.customer_lifetime_days > 180 AND ci.total_orders > 10 THEN 'true'\n        ELSE 'false'\n    END AS is_loyal_customer\nFROM customer_info ci\nLEFT JOIN customer_products cp ON ci.customer_id = cp.customer_id\nLEFT JOIN customer_stores cs ON ci.customer_id = cs.customer_id", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:52.796812Z", "completed_at": "2024-10-03T06:29:52.796819Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:52.797249Z", "completed_at": "2024-10-03T06:29:55.256856Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.4630420207977295, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e72d-1dd3-8fa1-e6368ae43a76"}, "message": null, "failures": 0, "unique_id": "unit_test.dataxdemo.mart_jaffle_data__customer_360.test_customer_360_loyalty_status", "compiled": true, "compiled_code": "WITH  __dbt__cte__stg_jaffle_data__customers as (\n\n-- Fixture for stg_jaffle_data__customers\nselect cast(1 as string)\n as id, cast('Alice' as string)\n as name\nunion all\nselect cast(2 as string)\n as id, cast('Bob' as string)\n as name\n),  __dbt__cte__int_jaffle_data__customer_order_history as (\n\n-- Fixture for int_jaffle_data__customer_order_history\nselect cast(1 as string)\n as customer_id, cast(15 as bigint)\n as total_orders, cast(1500 as bigint)\n as total_spent, cast(100 as double)\n as avg_order_value, cast('2023-01-01' as timestamp)\n as first_order_date, cast('2023-07-20' as timestamp)\n as last_order_date, cast(200 as bigint)\n as customer_lifetime_days, cast('Regular' as string)\n as customer_segment\nunion all\nselect cast(2 as string)\n as customer_id, cast(5 as bigint)\n as total_orders, cast(500 as bigint)\n as total_spent, cast(100 as double)\n as avg_order_value, cast('2023-05-01' as timestamp)\n as first_order_date, cast('2023-07-10' as timestamp)\n as last_order_date, cast(100 as bigint)\n as customer_lifetime_days, cast('New' as string)\n as customer_segment\n),  __dbt__cte__int_jaffle_data__order_items as (\n\n-- Fixture for int_jaffle_data__order_items\nselect cast(null as string) as order_id, cast(1 as string)\n as customer_id, cast(null as timestamp) as ordered_at, cast(1 as string)\n as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast('SKU001' as string)\n as product_type, cast(null as bigint) as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\nunion all\nselect cast(null as string) as order_id, cast(1 as string)\n as customer_id, cast(null as timestamp) as ordered_at, cast(2 as string)\n as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast('SKU002' as string)\n as product_type, cast(null as bigint) as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\nunion all\nselect cast(null as string) as order_id, cast(2 as string)\n as customer_id, cast(null as timestamp) as ordered_at, cast(1 as string)\n as store_id, cast(null as string) as sku, cast(null as string) as product_name, cast('SKU003' as string)\n as product_type, cast(null as bigint) as product_price, cast(null as int) as customer_order_seq, cast(null as string) as previous_product_type\n), customer_info AS (\n    SELECT\n        c.id AS customer_id,\n        c.name AS customer_name,\n        coh.total_orders,\n        coh.total_spent,\n        coh.avg_order_value,\n        coh.first_order_date,\n        coh.last_order_date,\n        coh.customer_lifetime_days,\n        coh.customer_segment\n    FROM __dbt__cte__stg_jaffle_data__customers c\n    LEFT JOIN __dbt__cte__int_jaffle_data__customer_order_history coh\n        ON c.id = coh.customer_id\n),\ncustomer_products AS (\n    SELECT\n        customer_id,\n        array_join(collect_set(product_type), ', ') AS product_types_purchased,\n        COUNT(DISTINCT product_type) AS unique_product_types_count\n    FROM __dbt__cte__int_jaffle_data__order_items\n    GROUP BY 1\n),\ncustomer_stores AS (\n    SELECT\n        customer_id,\n        array_join(collect_set(cast(store_id as string)), ', ') AS visited_store_ids,\n        COUNT(DISTINCT store_id) AS unique_stores_visited\n    FROM __dbt__cte__int_jaffle_data__order_items\n    GROUP BY 1\n)\n\nSELECT\n    ci.*,\n    cp.product_types_purchased,\n    cp.unique_product_types_count,\n    cs.visited_store_ids,\n    cs.unique_stores_visited,\n    CASE \n        WHEN ci.customer_lifetime_days > 180 AND ci.total_orders > 10 THEN 'true'\n        ELSE 'false'\n    END AS is_loyal_customer\nFROM customer_info ci\nLEFT JOIN customer_products cp ON ci.customer_id = cp.customer_id\nLEFT JOIN customer_stores cs ON ci.customer_id = cs.customer_id", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-10-03T06:29:55.260208Z", "completed_at": "2024-10-03T06:29:55.265611Z"}, {"name": "execute", "started_at": "2024-10-03T06:29:55.276277Z", "completed_at": "2024-10-03T06:30:06.065063Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 10.80754280090332, "adapter_response": {"_message": "OK", "query_id": "01ef8150-e7a5-18d5-951c-b3e04b2c9065"}, "message": "OK", "failures": null, "unique_id": "model.dataxdemo.mart_jaffle_data__customer_360", "compiled": true, "compiled_code": "WITH customer_info AS (\n    SELECT\n        c.id AS customer_id,\n        c.name AS customer_name,\n        coh.total_orders,\n        coh.total_spent,\n        coh.avg_order_value,\n        coh.first_order_date,\n        coh.last_order_date,\n        coh.customer_lifetime_days,\n        coh.customer_segment\n    FROM `catalog_main`.`default`.`stg_jaffle_data__customers` c\n    LEFT JOIN `catalog_main`.`default`.`int_jaffle_data__customer_order_history` coh\n        ON c.id = coh.customer_id\n),\ncustomer_products AS (\n    SELECT\n        customer_id,\n        array_join(collect_set(product_type), ', ') AS product_types_purchased,\n        COUNT(DISTINCT product_type) AS unique_product_types_count\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n    GROUP BY 1\n),\ncustomer_stores AS (\n    SELECT\n        customer_id,\n        array_join(collect_set(cast(store_id as string)), ', ') AS visited_store_ids,\n        COUNT(DISTINCT store_id) AS unique_stores_visited\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n    GROUP BY 1\n)\n\nSELECT\n    ci.*,\n    cp.product_types_purchased,\n    cp.unique_product_types_count,\n    cs.visited_store_ids,\n    cs.unique_stores_visited,\n    CASE \n        WHEN ci.customer_lifetime_days > 180 AND ci.total_orders > 10 THEN 'true'\n        ELSE 'false'\n    END AS is_loyal_customer\nFROM customer_info ci\nLEFT JOIN customer_products cp ON ci.customer_id = cp.customer_id\nLEFT JOIN customer_stores cs ON ci.customer_id = cs.customer_id", "relation_name": "`catalog_main`.`default`.`mart_jaffle_data__customer_360`"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:06.085592Z", "completed_at": "2024-10-03T06:30:06.099330Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:06.101317Z", "completed_at": "2024-10-03T06:30:06.902879Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8329060077667236, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ee18-1e06-9d13-df1576039298"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.customer_segmentation", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 VIP customers \u0e21\u0e35\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 20 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49\u0e08\u0e48\u0e32\u0e22\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 5000\n-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 Regular customers \u0e21\u0e35\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 10 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49\u0e08\u0e48\u0e32\u0e22\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 1000\n-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 New customers \u0e21\u0e35\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e19\u0e49\u0e2d\u0e22\u0e01\u0e27\u0e48\u0e32 10 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49\u0e08\u0e48\u0e32\u0e22\u0e19\u0e49\u0e2d\u0e22\u0e01\u0e27\u0e48\u0e32 1000\nWITH customer_validation AS (\n    SELECT \n        customer_segment,\n        total_orders,\n        total_spent\n    FROM `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n)\nSELECT *\nFROM customer_validation\nWHERE (customer_segment = 'VIP' AND (total_orders < 20 OR total_spent < 5000))\n   OR (customer_segment = 'Regular' AND (total_orders < 10 AND total_spent < 1000))\n   OR (customer_segment = 'New' AND (total_orders >= 10 OR total_spent >= 1000))", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:06.081961Z", "completed_at": "2024-10-03T06:30:06.099101Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:06.099586Z", "completed_at": "2024-10-03T06:30:06.909412Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8415000438690186, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ee17-1528-848e-0ef4f3020811"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.accepted_values_mart_jaffle_data__customer_360_is_loyal_customer__True__true__false.e050959136", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_loyal_customer as value_field,\n        count(*) as n_records\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    group by is_loyal_customer\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'true','false'\n)\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:06.077785Z", "completed_at": "2024-10-03T06:30:06.097072Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:06.097346Z", "completed_at": "2024-10-03T06:30:06.910022Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8424100875854492, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ee19-1cfb-b9f2-8cff87dd5555"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.accepted_values_mart_jaffle_data__customer_360_customer_segment__VIP__Regular__New.00d0c21bf7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_segment as value_field,\n        count(*) as n_records\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    group by customer_segment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'VIP','Regular','New'\n)\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:06.087861Z", "completed_at": "2024-10-03T06:30:06.576353Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:06.576915Z", "completed_at": "2024-10-03T06:30:06.948811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8783652782440186, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ee66-1023-8a9b-fd5e9139891b"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_to_exist_mart_jaffle_data__customer_360_product_types_purchased.bb0428b608", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('PRODUCT_TYPES_PURCHASED' as string) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:06.952011Z", "completed_at": "2024-10-03T06:30:06.957825Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:06.958017Z", "completed_at": "2024-10-03T06:30:07.403139Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4540390968322754, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ee96-1579-81ca-67bbde3aec14"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_first_order_date___current_timestamp____2016_09_01_.646b99062d", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and first_order_date >= '2016-09-01' and first_order_date <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:06.934430Z", "completed_at": "2024-10-03T06:30:06.938725Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:06.939210Z", "completed_at": "2024-10-03T06:30:07.434442Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5179390907287598, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ee95-11d2-9041-fc2d8e609ef3"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_customer_lifetime_days__0__False.14db20e87a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and customer_lifetime_days >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:06.930149Z", "completed_at": "2024-10-03T06:30:06.938965Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:06.941083Z", "completed_at": "2024-10-03T06:30:07.434966Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5200681686401367, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ee94-18eb-87ec-fc6aa74b2aff"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_avg_order_value__0__True.9e88e0f2ed", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and avg_order_value > 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:06.919024Z", "completed_at": "2024-10-03T06:30:07.291405Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:07.291779Z", "completed_at": "2024-10-03T06:30:07.543542Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.6305279731750488, "adapter_response": {"_message": "OK", "query_id": "01ef8150-eecc-1c1b-84a8-31e4b0986d31"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_to_exist_mart_jaffle_data__customer_360_visited_store_ids.bb949c6651", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('VISITED_STORE_IDS' as string) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:07.442847Z", "completed_at": "2024-10-03T06:30:07.450822Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:07.454263Z", "completed_at": "2024-10-03T06:30:07.873104Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4366438388824463, "adapter_response": {"_message": "OK", "query_id": "01ef8150-eee2-14a0-a429-ce53b00295c8"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_total_orders__1__False.03fc398970", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_orders >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:07.410906Z", "completed_at": "2024-10-03T06:30:07.427689Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:07.428749Z", "completed_at": "2024-10-03T06:30:07.876573Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4703519344329834, "adapter_response": {"_message": "OK", "query_id": "01ef8150-eee0-1727-be74-05f3e694d65a"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_last_order_date___current_timestamp____2017_01_08_.d3c1ee2b0b", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and last_order_date >= '2017-01-08' and last_order_date <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:07.447241Z", "completed_at": "2024-10-03T06:30:07.450610Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:07.451013Z", "completed_at": "2024-10-03T06:30:07.925589Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4849972724914551, "adapter_response": {"_message": "OK", "query_id": "01ef8150-eee2-16f6-a28f-e6e0c033ee6e"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_total_spent__0__True.a4515235fc", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_spent > 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:07.547289Z", "completed_at": "2024-10-03T06:30:07.552846Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:07.553223Z", "completed_at": "2024-10-03T06:30:08.034284Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4891650676727295, "adapter_response": {"_message": "OK", "query_id": "01ef8150-eef0-1b64-912c-885a2d2de5a2"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_unique_product_types_count__1__False.2788835ac9", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and unique_product_types_count >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:07.882321Z", "completed_at": "2024-10-03T06:30:07.891511Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:07.892333Z", "completed_at": "2024-10-03T06:30:08.371919Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4925229549407959, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ef24-15b0-bdc3-f4e46a30e167"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_unique_stores_visited__1__False.b3e4291dc9", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and unique_stores_visited >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:07.886643Z", "completed_at": "2024-10-03T06:30:07.895755Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:07.896005Z", "completed_at": "2024-10-03T06:30:08.514779Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6350312232971191, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ef27-1263-92cb-538629308807"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_in_set_mart_jaffle_data__customer_360_customer_segment__VIP__Regular__New.48db004d36", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        customer_segment as value_field\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nset_values as (\n\n    select\n        cast('VIP' as string) as value_field\n    union all\n    select\n        cast('Regular' as string) as value_field\n    union all\n    select\n        cast('New' as string) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:07.928060Z", "completed_at": "2024-10-03T06:30:07.931686Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:07.931858Z", "completed_at": "2024-10-03T06:30:08.560225Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6337416172027588, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ef2b-1269-880e-8378c37164d0"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_in_set_mart_jaffle_data__customer_360_is_loyal_customer__true__false.a9101a5e28", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        is_loyal_customer as value_field\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nset_values as (\n\n    select\n        cast('true' as string) as value_field\n    union all\n    select\n        cast('false' as string) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:08.562880Z", "completed_at": "2024-10-03T06:30:08.565142Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:08.565307Z", "completed_at": "2024-10-03T06:30:09.025938Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.46521902084350586, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ef8a-199b-b2f1-c4a28b83a1d2"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_customer_id", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35 customer_id \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 NULL\nWITH customer_validation AS (\n    SELECT \n        customer_id\n    FROM `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n)\nSELECT *\nFROM customer_validation\nWHERE customer_id IS NULL", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:08.519013Z", "completed_at": "2024-10-03T06:30:08.522732Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:08.523027Z", "completed_at": "2024-10-03T06:30:09.092870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.576362133026123, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ef88-1263-8e8c-30ed428cd61e"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.loyal_customer_conditions", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e40\u0e07\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e02\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e08\u0e07\u0e23\u0e31\u0e01\u0e20\u0e31\u0e01\u0e14\u0e35 (loyal customer)\nWITH customer_validation AS (\n    SELECT \n        is_loyal_customer,\n        customer_lifetime_days,\n        total_orders\n    FROM `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n)\nSELECT *\nFROM customer_validation\nWHERE is_loyal_customer = TRUE AND (customer_lifetime_days <= 180 OR total_orders <= 10)", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:08.375025Z", "completed_at": "2024-10-03T06:30:08.378994Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:08.379223Z", "completed_at": "2024-10-03T06:30:09.170239Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7974328994750977, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ef72-101d-919e-eb6213445b16"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_row_count_to_equal_mart_jaffle_data__customer_360_930.52d366eb94", "compiled": true, "compiled_code": "\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(*) = 930\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:08.037506Z", "completed_at": "2024-10-03T06:30:08.362638Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:08.363051Z", "completed_at": "2024-10-03T06:30:09.328877Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2943668365478516, "adapter_response": {"_message": "OK", "query_id": "01ef8150-ef7c-1450-ad8c-a816b54c57d8"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_columns_to_match_ordered_list_mart_jaffle_data__customer_360_customer_id__customer_name__total_orders__total_spent__avg_order_value__first_order_date__last_order_date__customer_lifetime_days__customer_segment__product_types_purchased__unique_product_types_count__visited_store_ids__unique_stores_visited__is_loyal_customer.c15b8e62ef", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('CUSTOMER_ID' as string) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_NAME' as string) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('TOTAL_ORDERS' as string) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('TOTAL_SPENT' as string) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('AVG_ORDER_VALUE' as string) as relation_column\n        union all\n        \n        select\n            6 as relation_column_idx,\n            cast('FIRST_ORDER_DATE' as string) as relation_column\n        union all\n        \n        select\n            7 as relation_column_idx,\n            cast('LAST_ORDER_DATE' as string) as relation_column\n        union all\n        \n        select\n            8 as relation_column_idx,\n            cast('CUSTOMER_LIFETIME_DAYS' as string) as relation_column\n        union all\n        \n        select\n            9 as relation_column_idx,\n            cast('CUSTOMER_SEGMENT' as string) as relation_column\n        union all\n        \n        select\n            10 as relation_column_idx,\n            cast('PRODUCT_TYPES_PURCHASED' as string) as relation_column\n        union all\n        \n        select\n            11 as relation_column_idx,\n            cast('UNIQUE_PRODUCT_TYPES_COUNT' as string) as relation_column\n        union all\n        \n        select\n            12 as relation_column_idx,\n            cast('VISITED_STORE_IDS' as string) as relation_column\n        union all\n        \n        select\n            13 as relation_column_idx,\n            cast('UNIQUE_STORES_VISITED' as string) as relation_column\n        union all\n        \n        select\n            14 as relation_column_idx,\n            cast('IS_LOYAL_CUSTOMER' as string) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('CUSTOMER_ID' as string) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_NAME' as string) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('TOTAL_ORDERS' as string) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('TOTAL_SPENT' as string) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('AVG_ORDER_VALUE' as string) as input_column\n        union all\n        \n        select\n            6 as input_column_idx,\n            cast('FIRST_ORDER_DATE' as string) as input_column\n        union all\n        \n        select\n            7 as input_column_idx,\n            cast('LAST_ORDER_DATE' as string) as input_column\n        union all\n        \n        select\n            8 as input_column_idx,\n            cast('CUSTOMER_LIFETIME_DAYS' as string) as input_column\n        union all\n        \n        select\n            9 as input_column_idx,\n            cast('CUSTOMER_SEGMENT' as string) as input_column\n        union all\n        \n        select\n            10 as input_column_idx,\n            cast('PRODUCT_TYPES_PURCHASED' as string) as input_column\n        union all\n        \n        select\n            11 as input_column_idx,\n            cast('UNIQUE_PRODUCT_TYPES_COUNT' as string) as input_column\n        union all\n        \n        select\n            12 as input_column_idx,\n            cast('VISITED_STORE_IDS' as string) as input_column\n        union all\n        \n        select\n            13 as input_column_idx,\n            cast('UNIQUE_STORES_VISITED' as string) as input_column\n        union all\n        \n        select\n            14 as input_column_idx,\n            cast('IS_LOYAL_CUSTOMER' as string) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:09.031145Z", "completed_at": "2024-10-03T06:30:09.037306Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:09.037615Z", "completed_at": "2024-10-03T06:30:09.454791Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.42671728134155273, "adapter_response": {"_message": "OK", "query_id": "01ef8150-efd6-1e9d-8b63-ad90d4c81acd"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_mart_jaffle_data__customer_360_customer_id.0a9a2d200d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `catalog_main`.`default`.`mart_jaffle_data__customer_360`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:09.096919Z", "completed_at": "2024-10-03T06:30:09.101879Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:09.102189Z", "completed_at": "2024-10-03T06:30:09.535519Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4413950443267822, "adapter_response": {"_message": "OK", "query_id": "01ef8150-efe2-1a4c-af9e-4f01e8b330d5"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.not_null_mart_jaffle_data__customer_360_customer_name.2f661cfccc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom `catalog_main`.`default`.`mart_jaffle_data__customer_360`\nwhere customer_name is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:09.174244Z", "completed_at": "2024-10-03T06:30:09.178733Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:09.178996Z", "completed_at": "2024-10-03T06:30:09.689015Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5175130367279053, "adapter_response": {"_message": "OK", "query_id": "01ef8150-efea-1856-9e35-ea68a8c5c318"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.unique_mart_jaffle_data__customer_360_customer_id.31caded71f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`mart_jaffle_data__customer_360`\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-10-03T06:30:09.335530Z", "completed_at": "2024-10-03T06:30:09.340708Z"}, {"name": "execute", "started_at": "2024-10-03T06:30:09.341045Z", "completed_at": "2024-10-03T06:30:09.812147Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4801461696624756, "adapter_response": {"_message": "OK", "query_id": "01ef8150-f003-132e-ab3d-787645f3e643"}, "message": null, "failures": 0, "unique_id": "test.dataxdemo.unique_product_types_count", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e1c\u0e25\u0e34\u0e15\u0e20\u0e31\u0e13\u0e11\u0e4c\u0e17\u0e35\u0e48\u0e0b\u0e37\u0e49\u0e2d\u0e15\u0e23\u0e07\u0e01\u0e31\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e1c\u0e25\u0e34\u0e15\u0e20\u0e31\u0e13\u0e11\u0e4c\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19\nWITH customer_validation AS (\n    SELECT\n        product_types_purchased,\n        unique_product_types_count\n    FROM `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n)\nSELECT *\nFROM customer_validation\nWHERE unique_product_types_count != COALESCE(CARDINALITY(SPLIT(product_types_purchased, ',')), 0)", "relation_name": null}], "elapsed_time": 65.06023287773132, "args": {"printer_width": 80, "show_resource_report": false, "log_format_file": "debug", "use_colors": true, "version_check": true, "log_path": "/Users/coraline/Desktop/dataxdemo_github/logs", "quiet": false, "source_freshness_run_project_hooks": false, "defer": false, "which": "build", "empty": false, "populate_cache": true, "partial_parse_file_diff": true, "favor_state": false, "enable_legacy_logger": false, "log_level_file": "debug", "select": [], "show": false, "partial_parse": true, "resource_types": [], "static_parser": true, "export_saved_queries": false, "use_colors_file": true, "send_anonymous_usage_stats": true, "vars": {}, "exclude": [], "log_level": "info", "include_saved_query": false, "require_explicit_package_overrides_for_builtin_materializations": true, "project_dir": "/Users/coraline/Desktop/dataxdemo_github", "require_resource_names_without_spaces": false, "exclude_resource_types": [], "invocation_command": "dbt build", "log_format": "default", "write_json": true, "warn_error_options": {"include": [], "exclude": []}, "strict_mode": false, "macro_debugging": false, "profiles_dir": "/Users/coraline/.dbt", "log_file_max_bytes": 10485760, "print": true, "indirect_selection": "eager", "introspect": true, "cache_selected_only": false}}