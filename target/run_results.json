{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.7", "generated_at": "2024-09-30T09:50:30.890248Z", "invocation_id": "cc5c8b99-e941-4d60-a0c1-a7c2fb13589b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.605817Z", "completed_at": "2024-09-30T09:50:27.617672Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:27.617900Z", "completed_at": "2024-09-30T09:50:27.617913Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01842784881591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dataxdemo.stg_jaffle_data__customers", "compiled": true, "compiled_code": "SELECT\n    id,\n    name\nFROM `jaffle_data`.`default`.`customers`", "relation_name": "`catalog_main`.`default`.`stg_jaffle_data__customers`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.615186Z", "completed_at": "2024-09-30T09:50:27.618157Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:27.619012Z", "completed_at": "2024-09-30T09:50:27.619018Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01828908920288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dataxdemo.stg_jaffle_data__products", "compiled": true, "compiled_code": "SELECT\n    sku,\n    name,\n    type,\n    price,\n    COALESCE(NULLIF(description, ''), 'No description') AS description\nFROM `jaffle_data`.`default`.`products`", "relation_name": "`catalog_main`.`default`.`stg_jaffle_data__products`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.613357Z", "completed_at": "2024-09-30T09:50:27.618330Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:27.619227Z", "completed_at": "2024-09-30T09:50:27.619231Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019307613372802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dataxdemo.stg_jaffle_data__orders", "compiled": true, "compiled_code": "SELECT\n    id,\n    customer as customer_id,\n    ordered_at,\n    store_id,\n    subtotal,\n    tax_paid,\n    order_total\nFROM `jaffle_data`.`default`.`orders`", "relation_name": "`catalog_main`.`default`.`stg_jaffle_data__orders`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.611430Z", "completed_at": "2024-09-30T09:50:27.618831Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:27.619721Z", "completed_at": "2024-09-30T09:50:27.619725Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01983189582824707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dataxdemo.stg_jaffle_data__items", "compiled": true, "compiled_code": "SELECT\n    id,\n    order_id,\n    sku\nFROM `jaffle_data`.`default`.`items`", "relation_name": "`catalog_main`.`default`.`stg_jaffle_data__items`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.646517Z", "completed_at": "2024-09-30T09:50:27.651885Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:27.652374Z", "completed_at": "2024-09-30T09:50:27.652381Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030037879943847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__customers_id.100fb11c77", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `catalog_main`.`default`.`stg_jaffle_data__customers`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.640378Z", "completed_at": "2024-09-30T09:50:27.652031Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:27.652595Z", "completed_at": "2024-09-30T09:50:27.652598Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03031611442565918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_not_be_null_stg_jaffle_data__customers_name.4f24d4902e", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  name is not null as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__customers`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.656234Z", "completed_at": "2024-09-30T09:50:27.665731Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:27.666073Z", "completed_at": "2024-09-30T09:50:27.666077Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01246786117553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.unique_stg_jaffle_data__customers_id.3c67ccf3c1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`stg_jaffle_data__customers`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.660180Z", "completed_at": "2024-09-30T09:50:27.665912Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:27.666268Z", "completed_at": "2024-09-30T09:50:27.666271Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01244211196899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__products_price__0__True.0e0af32254", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and price > 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__products`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.625594Z", "completed_at": "2024-09-30T09:50:28.045195Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.045466Z", "completed_at": "2024-09-30T09:50:28.045473Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.42426085472106934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__customers_id__string.34a2215105", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.048711Z", "completed_at": "2024-09-30T09:50:28.422082Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.423165Z", "completed_at": "2024-09-30T09:50:28.423170Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3790628910064697, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_price__bigint.a7b3cf3522", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('BIGINT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.672599Z", "completed_at": "2024-09-30T09:50:28.427009Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.427983Z", "completed_at": "2024-09-30T09:50:28.427990Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7614948749542236, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_name__string.2960b0937d", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.636824Z", "completed_at": "2024-09-30T09:50:28.486471Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.486773Z", "completed_at": "2024-09-30T09:50:28.486779Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8643441200256348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__customers_name__string.0bbf0a184b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:27.669411Z", "completed_at": "2024-09-30T09:50:28.518389Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.518627Z", "completed_at": "2024-09-30T09:50:28.518632Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8513798713684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_description__string.e6815a8f34", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DESCRIPTION'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.520938Z", "completed_at": "2024-09-30T09:50:28.524208Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.524416Z", "completed_at": "2024-09-30T09:50:28.524420Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005140066146850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__products_name.74f8ada786", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom `catalog_main`.`default`.`stg_jaffle_data__products`\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.526417Z", "completed_at": "2024-09-30T09:50:28.529268Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.529453Z", "completed_at": "2024-09-30T09:50:28.529457Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004480838775634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__products_price.2a44293b6a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `catalog_main`.`default`.`stg_jaffle_data__products`\nwhere price is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.531277Z", "completed_at": "2024-09-30T09:50:28.534684Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.534866Z", "completed_at": "2024-09-30T09:50:28.534870Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0049343109130859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__products_sku.88fb35f076", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku\nfrom `catalog_main`.`default`.`stg_jaffle_data__products`\nwhere sku is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.536620Z", "completed_at": "2024-09-30T09:50:28.539309Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.539489Z", "completed_at": "2024-09-30T09:50:28.539493Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004171133041381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.unique_stg_jaffle_data__products_sku.7a42d252d8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sku as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`stg_jaffle_data__products`\nwhere sku is not null\ngroup by sku\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.541252Z", "completed_at": "2024-09-30T09:50:28.544007Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.544179Z", "completed_at": "2024-09-30T09:50:28.544182Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0042378902435302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__orders_order_total__0__False.e5c4cf0b8f", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_total >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__orders`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.545909Z", "completed_at": "2024-09-30T09:50:28.550191Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.550365Z", "completed_at": "2024-09-30T09:50:28.550368Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005764961242675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__orders_ordered_at___current_timestamp____2016_09_01_.7b1e8c34b3", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ordered_at >= '2016-09-01' and ordered_at <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__orders`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.552106Z", "completed_at": "2024-09-30T09:50:28.554877Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.555042Z", "completed_at": "2024-09-30T09:50:28.555045Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004205942153930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__orders_subtotal__0__False.10681f0be3", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and subtotal >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__orders`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.556812Z", "completed_at": "2024-09-30T09:50:28.559459Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.559619Z", "completed_at": "2024-09-30T09:50:28.559623Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0041599273681640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_stg_jaffle_data__orders_tax_paid__0__False.6350fad164", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and tax_paid >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`stg_jaffle_data__orders`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.431563Z", "completed_at": "2024-09-30T09:50:28.809347Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.809855Z", "completed_at": "2024-09-30T09:50:28.809865Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.38353776931762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_sku__string.9a48b6221b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SKU'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.489806Z", "completed_at": "2024-09-30T09:50:28.855817Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.855987Z", "completed_at": "2024-09-30T09:50:28.855992Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.368131160736084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_jaffle_data__products_sku__name__type__price__description.86308bc330", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('SKU' as string) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('NAME' as string) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('TYPE' as string) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('PRICE' as string) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('DESCRIPTION' as string) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('SKU' as string) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('NAME' as string) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('TYPE' as string) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('PRICE' as string) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('DESCRIPTION' as string) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.440661Z", "completed_at": "2024-09-30T09:50:28.878834Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.879144Z", "completed_at": "2024-09-30T09:50:28.879151Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.44878172874450684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__products_type__string.5da970e07a", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('DESCRIPTION' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TYPE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.561195Z", "completed_at": "2024-09-30T09:50:28.896706Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:28.896942Z", "completed_at": "2024-09-30T09:50:28.896947Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3370838165283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_customer_id__string.5b5d1d139b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CUSTOMER_ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.814259Z", "completed_at": "2024-09-30T09:50:29.158993Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.159420Z", "completed_at": "2024-09-30T09:50:29.159431Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3479499816894531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_id__string.f0ed3fca30", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.857708Z", "completed_at": "2024-09-30T09:50:29.173384Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.173550Z", "completed_at": "2024-09-30T09:50:29.173555Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3170969486236572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_order_total__bigint.9d0e28da5b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_TOTAL'\n            and\n            relation_column_type not in ('BIGINT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.884310Z", "completed_at": "2024-09-30T09:50:29.207161Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.207458Z", "completed_at": "2024-09-30T09:50:29.207465Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3275320529937744, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_ordered_at__timestamp.b81430b8e6", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDERED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.210412Z", "completed_at": "2024-09-30T09:50:29.214343Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.214591Z", "completed_at": "2024-09-30T09:50:29.214597Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006224870681762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__orders_customer_id.c59546ee04", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `catalog_main`.`default`.`stg_jaffle_data__orders`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.217144Z", "completed_at": "2024-09-30T09:50:29.220564Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.220783Z", "completed_at": "2024-09-30T09:50:29.220787Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005505800247192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__orders_id.352f2d7a84", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `catalog_main`.`default`.`stg_jaffle_data__orders`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.222923Z", "completed_at": "2024-09-30T09:50:29.227777Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.228371Z", "completed_at": "2024-09-30T09:50:29.228376Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00705409049987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__orders_ordered_at.38bc7e1fd1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ordered_at\nfrom `catalog_main`.`default`.`stg_jaffle_data__orders`\nwhere ordered_at is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:28.899201Z", "completed_at": "2024-09-30T09:50:29.234827Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.237780Z", "completed_at": "2024-09-30T09:50:29.237784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.34026122093200684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_store_id__string.2ed4326a30", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'STORE_ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.235016Z", "completed_at": "2024-09-30T09:50:29.238799Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.239264Z", "completed_at": "2024-09-30T09:50:29.239268Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006358623504638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.unique_stg_jaffle_data__orders_id.909cc2500b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`stg_jaffle_data__orders`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.241155Z", "completed_at": "2024-09-30T09:50:29.247855Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.248223Z", "completed_at": "2024-09-30T09:50:29.248227Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009948253631591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dataxdemo.int_jaffle_data__order_items", "compiled": true, "compiled_code": "WITH order_items AS (\n    SELECT\n        o.id AS order_id,\n        o.customer_id,\n        o.ordered_at,\n        o.store_id,\n        i.sku,\n        p.name AS product_name,\n        p.type AS product_type,\n        p.price AS product_price\n    FROM `catalog_main`.`default`.`stg_jaffle_data__orders` o\n    JOIN `catalog_main`.`default`.`stg_jaffle_data__items` i ON o.id = i.order_id\n    JOIN `catalog_main`.`default`.`stg_jaffle_data__products` p ON i.sku = p.sku\n)\n\nSELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY ordered_at) AS customer_order_seq,\n    LAG(product_type) OVER (PARTITION BY customer_id ORDER BY ordered_at) AS previous_product_type\nFROM order_items", "relation_name": "`catalog_main`.`default`.`int_jaffle_data__order_items`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.175241Z", "completed_at": "2024-09-30T09:50:29.605014Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.606814Z", "completed_at": "2024-09-30T09:50:29.606819Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4353780746459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_tax_paid__bigint.2ae5b236c5", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TAX_PAID'\n            and\n            relation_column_type not in ('BIGINT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.161317Z", "completed_at": "2024-09-30T09:50:29.605203Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.607019Z", "completed_at": "2024-09-30T09:50:29.607022Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4495391845703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__orders_subtotal__bigint.a691f7771b", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDERED_AT' as string) as relation_column,\n            cast('TIMESTAMP' as string) as relation_column_type\n        union all\n        \n        select\n            cast('STORE_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SUBTOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('TAX_PAID' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_TOTAL' as string) as relation_column,\n            cast('BIGINT' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SUBTOTAL'\n            and\n            relation_column_type not in ('BIGINT')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.243977Z", "completed_at": "2024-09-30T09:50:29.610469Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.611197Z", "completed_at": "2024-09-30T09:50:29.611200Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3716459274291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__items_id__string.15cc788b10", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.250964Z", "completed_at": "2024-09-30T09:50:29.610624Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.611222Z", "completed_at": "2024-09-30T09:50:29.611225Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.36284613609313965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__items_order_id__string.9819026f71", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.617815Z", "completed_at": "2024-09-30T09:50:29.621115Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.621771Z", "completed_at": "2024-09-30T09:50:29.621774Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015588045120239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__items_id.b4ba39df36", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `catalog_main`.`default`.`stg_jaffle_data__items`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.622208Z", "completed_at": "2024-09-30T09:50:29.627068Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.627478Z", "completed_at": "2024-09-30T09:50:29.627481Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014528989791870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__items_order_id.c2a29ae0da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `catalog_main`.`default`.`stg_jaffle_data__items`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.624505Z", "completed_at": "2024-09-30T09:50:29.627650Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.628046Z", "completed_at": "2024-09-30T09:50:29.628050Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015774011611938477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_stg_jaffle_data__items_sku.cff13ad356", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku\nfrom `catalog_main`.`default`.`stg_jaffle_data__items`\nwhere sku is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.631061Z", "completed_at": "2024-09-30T09:50:29.633885Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.635618Z", "completed_at": "2024-09-30T09:50:29.635621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010049104690551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.unique_stg_jaffle_data__items_id.9f80c479d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`stg_jaffle_data__items`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.634172Z", "completed_at": "2024-09-30T09:50:29.638058Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.638418Z", "completed_at": "2024-09-30T09:50:29.638421Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009167909622192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dataxdemo.int_jaffle_data__customer_order_history", "compiled": true, "compiled_code": "WITH customer_orders AS (\n    SELECT\n        customer_id,\n        COUNT(DISTINCT order_id) AS total_orders,\n        SUM(product_price) AS total_spent,\n        ROUND(AVG(product_price), 2) AS avg_order_value,\n        MIN(ordered_at) AS first_order_date,\n        MAX(ordered_at) AS last_order_date,\n        DATEDIFF(DAY, MIN(ordered_at), MAX(ordered_at)) AS customer_lifetime_days\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n    GROUP BY 1\n)\n\nSELECT\n    *,\n    CASE \n        WHEN total_orders >= 20 AND total_spent >= 5000 THEN 'VIP'\n        WHEN total_orders >= 10 OR total_spent >= 1000 THEN 'Regular'\n        ELSE 'New'\n    END AS customer_segment\nFROM customer_orders", "relation_name": "`catalog_main`.`default`.`int_jaffle_data__customer_order_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.636169Z", "completed_at": "2024-09-30T09:50:29.638856Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.639274Z", "completed_at": "2024-09-30T09:50:29.639278Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009585857391357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.customer_order_sequence", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 customer_order_seq \u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e15\u0e32\u0e21\u0e25\u0e33\u0e14\u0e31\u0e1a\u0e40\u0e27\u0e25\u0e32\u0e02\u0e2d\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\nWITH order_validation AS (\n    SELECT \n        customer_id,\n        order_id,\n        customer_order_seq,\n        ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY ordered_at) AS calculated_order_seq\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n)\nSELECT *\nFROM order_validation\nWHERE customer_order_seq != calculated_order_seq", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.641277Z", "completed_at": "2024-09-30T09:50:29.646401Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.649023Z", "completed_at": "2024-09-30T09:50:29.649026Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014144182205200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_value_lengths_to_be_between_int_jaffle_data__order_items_product_name__1.4f466644ea", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        product_name\n    ) >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.646709Z", "completed_at": "2024-09-30T09:50:29.652997Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.653356Z", "completed_at": "2024-09-30T09:50:29.653359Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013765096664428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_value_lengths_to_be_between_int_jaffle_data__order_items_sku__1.2a9d335aaf", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        sku\n    ) >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.649599Z", "completed_at": "2024-09-30T09:50:29.653760Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.654133Z", "completed_at": "2024-09-30T09:50:29.654136Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010035037994384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__order_items_customer_order_seq__1__False.52e3582bcb", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and customer_order_seq >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.656196Z", "completed_at": "2024-09-30T09:50:29.659853Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.660302Z", "completed_at": "2024-09-30T09:50:29.660305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011750936508178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__order_items_ordered_at___current_timestamp____2016_09_01_.39d106b85f", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ordered_at >= '2016-09-01' and ordered_at <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.660476Z", "completed_at": "2024-09-30T09:50:29.665527Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.665860Z", "completed_at": "2024-09-30T09:50:29.665864Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011387109756469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__order_items_product_price__0__True.f6c8be6d08", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and product_price > 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.663061Z", "completed_at": "2024-09-30T09:50:29.666291Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.666657Z", "completed_at": "2024-09-30T09:50:29.666660Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008975028991699219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__order_items_store_id__1.902515a353", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and store_id >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.668737Z", "completed_at": "2024-09-30T09:50:29.673938Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.677504Z", "completed_at": "2024-09-30T09:50:29.677507Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01854109764099121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_in_set_int_jaffle_data__order_items_product_type__jaffle__beverage.4ff451ff8d", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        product_type as value_field\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nset_values as (\n\n    select\n        cast('jaffle' as string) as value_field\n    union all\n    select\n        cast('beverage' as string) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.674073Z", "completed_at": "2024-09-30T09:50:29.684354Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.684862Z", "completed_at": "2024-09-30T09:50:29.684865Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01803898811340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_null_int_jaffle_data__order_items_previous_product_type__customer_order_seq_1.3fbb65c1b4", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  previous_product_type is null as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    where\n        customer_order_seq = 1\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.688024Z", "completed_at": "2024-09-30T09:50:29.694524Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.694700Z", "completed_at": "2024-09-30T09:50:29.694703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00937509536743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_row_count_to_equal_int_jaffle_data__order_items_90183.4cd42b2e47", "compiled": true, "compiled_code": "\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(*) = 90183\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__order_items`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.692100Z", "completed_at": "2024-09-30T09:50:29.695509Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.695870Z", "completed_at": "2024-09-30T09:50:29.695873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009428024291992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_customer_id.3b72d60c7c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.697449Z", "completed_at": "2024-09-30T09:50:29.702507Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.702678Z", "completed_at": "2024-09-30T09:50:29.702681Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007414817810058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_customer_order_seq.027f6ab0f1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_order_seq\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere customer_order_seq is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.700339Z", "completed_at": "2024-09-30T09:50:29.703660Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.703963Z", "completed_at": "2024-09-30T09:50:29.703967Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007439136505126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_order_id.e5512f14e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.705217Z", "completed_at": "2024-09-30T09:50:29.711284Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.711456Z", "completed_at": "2024-09-30T09:50:29.711460Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008365869522094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_ordered_at.db9aeaeaad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ordered_at\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere ordered_at is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.709148Z", "completed_at": "2024-09-30T09:50:29.712040Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.712368Z", "completed_at": "2024-09-30T09:50:29.712372Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004796028137207031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_product_name.5c27b3e60a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere product_name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.714276Z", "completed_at": "2024-09-30T09:50:29.719102Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.719274Z", "completed_at": "2024-09-30T09:50:29.719278Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007261991500854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_product_price.0f74b87396", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_price\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere product_price is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.716967Z", "completed_at": "2024-09-30T09:50:29.719660Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.720039Z", "completed_at": "2024-09-30T09:50:29.720042Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0070803165435791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__order_items_sku.004f061050", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku\nfrom `catalog_main`.`default`.`int_jaffle_data__order_items`\nwhere sku is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.722357Z", "completed_at": "2024-09-30T09:50:29.725593Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.725754Z", "completed_at": "2024-09-30T09:50:29.725757Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005568742752075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.order_date_consistency", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e19 \u0e44\u0e21\u0e48\u0e40\u0e01\u0e34\u0e14\u0e02\u0e36\u0e49\u0e19\u0e01\u0e48\u0e2d\u0e19\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e04\u0e23\u0e31\u0e49\u0e07\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32\nWITH order_validation AS (\n    SELECT \n        customer_id,\n        order_id,\n        ordered_at,\n        LAG(ordered_at) OVER (PARTITION BY customer_id ORDER BY ordered_at) AS prev_order_date\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n)\nSELECT *\nFROM order_validation\nWHERE prev_order_date IS NOT NULL AND ordered_at < prev_order_date", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.724085Z", "completed_at": "2024-09-30T09:50:29.726126Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.726456Z", "completed_at": "2024-09-30T09:50:29.726459Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005574226379394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.previous_product_type_first_and_non_first_order", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 previous_product_type \u0e40\u0e1b\u0e47\u0e19 NULL \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e41\u0e23\u0e01\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19\n-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 previous_product_type \u0e44\u0e21\u0e48\u0e40\u0e1b\u0e47\u0e19 NULL \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e41\u0e23\u0e01\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\nWITH order_validation AS (\n    SELECT \n        customer_id,\n        order_id,\n        customer_order_seq,\n        previous_product_type\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n)\nSELECT *\nFROM order_validation\nWHERE (previous_product_type IS NULL AND customer_order_seq != 1)\n   OR (previous_product_type IS NOT NULL AND customer_order_seq = 1)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.728583Z", "completed_at": "2024-09-30T09:50:29.736164Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.736356Z", "completed_at": "2024-09-30T09:50:29.736359Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009747982025146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dataxdemo.mart_jaffle_data__customer_360", "compiled": true, "compiled_code": "WITH customer_info AS (\n    SELECT\n        c.id AS customer_id,\n        c.name AS customer_name,\n        coh.total_orders,\n        coh.total_spent,\n        coh.avg_order_value,\n        coh.first_order_date,\n        coh.last_order_date,\n        coh.customer_lifetime_days,\n        coh.customer_segment\n    FROM `catalog_main`.`default`.`stg_jaffle_data__customers` c\n    LEFT JOIN `catalog_main`.`default`.`int_jaffle_data__customer_order_history` coh\n        ON c.id = coh.customer_id\n),\ncustomer_products AS (\n    SELECT\n        customer_id,\n        array_join(collect_set(product_type), ', ') AS product_types_purchased,\n        COUNT(DISTINCT product_type) AS unique_product_types_count\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n    GROUP BY 1\n),\ncustomer_stores AS (\n    SELECT\n        customer_id,\n        array_join(collect_set(cast(store_id as string)), ', ') AS visited_store_ids,\n        COUNT(DISTINCT store_id) AS unique_stores_visited\n    FROM `catalog_main`.`default`.`int_jaffle_data__order_items`\n    GROUP BY 1\n)\n\nSELECT\n    ci.*,\n    cp.product_types_purchased,\n    cp.unique_product_types_count,\n    cs.visited_store_ids,\n    cs.unique_stores_visited,\n    CASE \n        WHEN ci.customer_lifetime_days > 180 AND ci.total_orders > 10 THEN 'true'\n        ELSE 'false'\n    END AS is_loyal_customer\nFROM customer_info ci\nLEFT JOIN customer_products cp ON ci.customer_id = cp.customer_id\nLEFT JOIN customer_stores cs ON ci.customer_id = cs.customer_id", "relation_name": "`catalog_main`.`default`.`mart_jaffle_data__customer_360`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.730756Z", "completed_at": "2024-09-30T09:50:29.737072Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.737596Z", "completed_at": "2024-09-30T09:50:29.737599Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010471820831298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.accepted_values_int_jaffle_data__customer_order_history_customer_segment__VIP__Regular__New.8ff7abaedf", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_segment as value_field,\n        count(*) as n_records\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    group by customer_segment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'VIP','Regular','New'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.739150Z", "completed_at": "2024-09-30T09:50:29.742093Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.744560Z", "completed_at": "2024-09-30T09:50:29.744563Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0077152252197265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_avg_order_value__0__False.e7780505f1", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and avg_order_value >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.742247Z", "completed_at": "2024-09-30T09:50:29.745379Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.745743Z", "completed_at": "2024-09-30T09:50:29.745747Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007484912872314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_customer_lifetime_days__0__False.0b9abec2c8", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and customer_lifetime_days >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.747328Z", "completed_at": "2024-09-30T09:50:29.753601Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.753792Z", "completed_at": "2024-09-30T09:50:29.753796Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00868082046508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_first_order_date___current_timestamp____2016_09_01_.d2b85ee1bf", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and first_order_date >= '2016-09-01' and first_order_date <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.750666Z", "completed_at": "2024-09-30T09:50:29.754408Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.754735Z", "completed_at": "2024-09-30T09:50:29.754738Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008371829986572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_last_order_date___current_timestamp____2017_01_08_.000b412171", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and last_order_date >= '2017-01-08' and last_order_date <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.756714Z", "completed_at": "2024-09-30T09:50:29.762589Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.762769Z", "completed_at": "2024-09-30T09:50:29.762773Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008358001708984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_total_orders__1__False.50acc358d7", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_orders >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.760287Z", "completed_at": "2024-09-30T09:50:29.763148Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.763520Z", "completed_at": "2024-09-30T09:50:29.763524Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008055925369262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_int_jaffle_data__customer_order_history_total_spent__0__False.c52184020a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_spent >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.765831Z", "completed_at": "2024-09-30T09:50:29.773987Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.774334Z", "completed_at": "2024-09-30T09:50:29.774337Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010910987854003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_in_set_int_jaffle_data__customer_order_history_customer_segment__VIP__Regular__New.6ea5a06a4d", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        customer_segment as value_field\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nset_values as (\n\n    select\n        cast('VIP' as string) as value_field\n    union all\n    select\n        cast('Regular' as string) as value_field\n    union all\n    select\n        cast('New' as string) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.776252Z", "completed_at": "2024-09-30T09:50:29.778793Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.778941Z", "completed_at": "2024-09-30T09:50:29.778944Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003854990005493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_row_count_to_equal_int_jaffle_data__customer_order_history_930.db7a9d72f8", "compiled": true, "compiled_code": "\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(*) = 930\n as expression\n\n\n    from `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.780421Z", "completed_at": "2024-09-30T09:50:29.783415Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.783573Z", "completed_at": "2024-09-30T09:50:29.783576Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004228830337524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_avg_order_value.4b4e03406a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_order_value\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere avg_order_value is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.785028Z", "completed_at": "2024-09-30T09:50:29.787180Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.787340Z", "completed_at": "2024-09-30T09:50:29.787343Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003398895263671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_customer_id.4043a5caa6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.788793Z", "completed_at": "2024-09-30T09:50:29.791047Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.791204Z", "completed_at": "2024-09-30T09:50:29.791207Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003507852554321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_customer_lifetime_days.115005d738", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_lifetime_days\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere customer_lifetime_days is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.792671Z", "completed_at": "2024-09-30T09:50:29.795084Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.795240Z", "completed_at": "2024-09-30T09:50:29.795243Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003663301467895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_customer_segment.8df9d54285", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_segment\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere customer_segment is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.796722Z", "completed_at": "2024-09-30T09:50:29.799082Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.799238Z", "completed_at": "2024-09-30T09:50:29.799241Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0036208629608154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_first_order_date.ba43b25594", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect first_order_date\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere first_order_date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.800674Z", "completed_at": "2024-09-30T09:50:29.802895Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.803045Z", "completed_at": "2024-09-30T09:50:29.803048Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003439188003540039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_last_order_date.cb8bc27dd8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect last_order_date\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere last_order_date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.804490Z", "completed_at": "2024-09-30T09:50:29.807394Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.807548Z", "completed_at": "2024-09-30T09:50:29.807551Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004152059555053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_total_orders.1968a221fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_orders\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere total_orders is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.809000Z", "completed_at": "2024-09-30T09:50:29.811062Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.811212Z", "completed_at": "2024-09-30T09:50:29.811215Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032792091369628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_int_jaffle_data__customer_order_history_total_spent.100903c9e8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_spent\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere total_spent is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.812697Z", "completed_at": "2024-09-30T09:50:29.814231Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.814373Z", "completed_at": "2024-09-30T09:50:29.814376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0027878284454345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.unique_customer_id", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35 customer_id \u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 1 record\nSELECT *\nFROM `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nWHERE customer_id IN (\n    SELECT customer_id\n    FROM `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\n    GROUP BY customer_id\n    HAVING COUNT(*) > 1\n)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.815772Z", "completed_at": "2024-09-30T09:50:29.817829Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.817979Z", "completed_at": "2024-09-30T09:50:29.817982Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032591819763183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.unique_int_jaffle_data__customer_order_history_customer_id.d16d952cf3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`int_jaffle_data__customer_order_history`\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.819433Z", "completed_at": "2024-09-30T09:50:29.821686Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.821838Z", "completed_at": "2024-09-30T09:50:29.821841Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0034942626953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.accepted_values_mart_jaffle_data__customer_360_customer_segment__VIP__Regular__New.00d0c21bf7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_segment as value_field,\n        count(*) as n_records\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    group by customer_segment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'VIP','Regular','New'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.823329Z", "completed_at": "2024-09-30T09:50:29.826092Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.826248Z", "completed_at": "2024-09-30T09:50:29.826251Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0040438175201416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.accepted_values_mart_jaffle_data__customer_360_is_loyal_customer__True__true__false.e050959136", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_loyal_customer as value_field,\n        count(*) as n_records\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    group by is_loyal_customer\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'true','false'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.827665Z", "completed_at": "2024-09-30T09:50:29.829241Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.829383Z", "completed_at": "2024-09-30T09:50:29.829386Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0027599334716796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.customer_segmentation", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 VIP customers \u0e21\u0e35\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 20 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49\u0e08\u0e48\u0e32\u0e22\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 5000\n-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 Regular customers \u0e21\u0e35\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 10 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49\u0e08\u0e48\u0e32\u0e22\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 1000\n-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 New customers \u0e21\u0e35\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e0b\u0e37\u0e49\u0e2d\u0e19\u0e49\u0e2d\u0e22\u0e01\u0e27\u0e48\u0e32 10 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49\u0e08\u0e48\u0e32\u0e22\u0e19\u0e49\u0e2d\u0e22\u0e01\u0e27\u0e48\u0e32 1000\nWITH customer_validation AS (\n    SELECT \n        customer_segment,\n        total_orders,\n        total_spent\n    FROM `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n)\nSELECT *\nFROM customer_validation\nWHERE (customer_segment = 'VIP' AND (total_orders < 20 OR total_spent < 5000))\n   OR (customer_segment = 'Regular' AND (total_orders < 10 AND total_spent < 1000))\n   OR (customer_segment = 'New' AND (total_orders >= 10 OR total_spent >= 1000))", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.614325Z", "completed_at": "2024-09-30T09:50:29.955871Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:29.956159Z", "completed_at": "2024-09-30T09:50:29.956168Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.34587597846984863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_of_type_stg_jaffle_data__items_sku__string.47ee20ec8d", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_ID' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        union all\n        \n        select\n            cast('SKU' as string) as relation_column,\n            cast('STRING' as string) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SKU'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.678092Z", "completed_at": "2024-09-30T09:50:30.005862Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.006151Z", "completed_at": "2024-09-30T09:50:30.006158Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3340270519256592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_columns_to_match_ordered_list_int_jaffle_data__order_items_order_id__customer_id__ordered_at__store_id__sku__product_name__product_type__product_price__customer_order_seq__previous_product_type.b7869df416", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('ORDER_ID' as string) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_ID' as string) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('ORDERED_AT' as string) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('STORE_ID' as string) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('SKU' as string) as relation_column\n        union all\n        \n        select\n            6 as relation_column_idx,\n            cast('PRODUCT_NAME' as string) as relation_column\n        union all\n        \n        select\n            7 as relation_column_idx,\n            cast('PRODUCT_TYPE' as string) as relation_column\n        union all\n        \n        select\n            8 as relation_column_idx,\n            cast('PRODUCT_PRICE' as string) as relation_column\n        union all\n        \n        select\n            9 as relation_column_idx,\n            cast('CUSTOMER_ORDER_SEQ' as string) as relation_column\n        union all\n        \n        select\n            10 as relation_column_idx,\n            cast('PREVIOUS_PRODUCT_TYPE' as string) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('ORDER_ID' as string) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_ID' as string) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('ORDERED_AT' as string) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('STORE_ID' as string) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('SKU' as string) as input_column\n        union all\n        \n        select\n            6 as input_column_idx,\n            cast('PRODUCT_NAME' as string) as input_column\n        union all\n        \n        select\n            7 as input_column_idx,\n            cast('PRODUCT_TYPE' as string) as input_column\n        union all\n        \n        select\n            8 as input_column_idx,\n            cast('PRODUCT_PRICE' as string) as input_column\n        union all\n        \n        select\n            9 as input_column_idx,\n            cast('CUSTOMER_ORDER_SEQ' as string) as input_column\n        union all\n        \n        select\n            10 as input_column_idx,\n            cast('PREVIOUS_PRODUCT_TYPE' as string) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.008896Z", "completed_at": "2024-09-30T09:50:30.012893Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.013128Z", "completed_at": "2024-09-30T09:50:30.013134Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0061492919921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_avg_order_value__0__True.9e88e0f2ed", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and avg_order_value > 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.015466Z", "completed_at": "2024-09-30T09:50:30.019900Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.020118Z", "completed_at": "2024-09-30T09:50:30.020123Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006356239318847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_customer_lifetime_days__0__False.14db20e87a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and customer_lifetime_days >= 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.022301Z", "completed_at": "2024-09-30T09:50:30.026125Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.026326Z", "completed_at": "2024-09-30T09:50:30.026330Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005610942840576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_first_order_date___current_timestamp____2016_09_01_.646b99062d", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and first_order_date >= '2016-09-01' and first_order_date <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.028323Z", "completed_at": "2024-09-30T09:50:30.031930Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.032119Z", "completed_at": "2024-09-30T09:50:30.032123Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005259037017822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_last_order_date___current_timestamp____2017_01_08_.d3c1ee2b0b", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and last_order_date >= '2017-01-08' and last_order_date <= current_timestamp()\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.034028Z", "completed_at": "2024-09-30T09:50:30.036971Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.037147Z", "completed_at": "2024-09-30T09:50:30.037151Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004521846771240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_total_orders__1__False.03fc398970", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_orders >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.038957Z", "completed_at": "2024-09-30T09:50:30.041797Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.041968Z", "completed_at": "2024-09-30T09:50:30.041972Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004355907440185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_total_spent__0__True.a4515235fc", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_spent > 0\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.043665Z", "completed_at": "2024-09-30T09:50:30.046359Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.046534Z", "completed_at": "2024-09-30T09:50:30.046538Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004148960113525391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_unique_product_types_count__1__False.2788835ac9", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and unique_product_types_count >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.048209Z", "completed_at": "2024-09-30T09:50:30.051686Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.051853Z", "completed_at": "2024-09-30T09:50:30.051857Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004889726638793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_between_mart_jaffle_data__customer_360_unique_stores_visited__1__False.b3e4291dc9", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and unique_stores_visited >= 1\n)\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.053505Z", "completed_at": "2024-09-30T09:50:30.056086Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.056243Z", "completed_at": "2024-09-30T09:50:30.056246Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003957033157348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_in_set_mart_jaffle_data__customer_360_customer_segment__VIP__Regular__New.48db004d36", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        customer_segment as value_field\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nset_values as (\n\n    select\n        cast('VIP' as string) as value_field\n    union all\n    select\n        cast('Regular' as string) as value_field\n    union all\n    select\n        cast('New' as string) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.057894Z", "completed_at": "2024-09-30T09:50:30.060384Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.060540Z", "completed_at": "2024-09-30T09:50:30.060544Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0039010047912597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_values_to_be_in_set_mart_jaffle_data__customer_360_is_loyal_customer__true__false.a9101a5e28", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        is_loyal_customer as value_field\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nset_values as (\n\n    select\n        cast('true' as string) as value_field\n    union all\n    select\n        cast('false' as string) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.768570Z", "completed_at": "2024-09-30T09:50:30.097658Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.097843Z", "completed_at": "2024-09-30T09:50:30.097847Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.33329105377197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_columns_to_match_ordered_list_int_jaffle_data__customer_order_history_customer_id__total_orders__total_spent__avg_order_value__first_order_date__last_order_date__customer_lifetime_days__customer_segment.13ae131a24", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('CUSTOMER_ID' as string) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('TOTAL_ORDERS' as string) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('TOTAL_SPENT' as string) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('AVG_ORDER_VALUE' as string) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('FIRST_ORDER_DATE' as string) as relation_column\n        union all\n        \n        select\n            6 as relation_column_idx,\n            cast('LAST_ORDER_DATE' as string) as relation_column\n        union all\n        \n        select\n            7 as relation_column_idx,\n            cast('CUSTOMER_LIFETIME_DAYS' as string) as relation_column\n        union all\n        \n        select\n            8 as relation_column_idx,\n            cast('CUSTOMER_SEGMENT' as string) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('CUSTOMER_ID' as string) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('TOTAL_ORDERS' as string) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('TOTAL_SPENT' as string) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('AVG_ORDER_VALUE' as string) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('FIRST_ORDER_DATE' as string) as input_column\n        union all\n        \n        select\n            6 as input_column_idx,\n            cast('LAST_ORDER_DATE' as string) as input_column\n        union all\n        \n        select\n            7 as input_column_idx,\n            cast('CUSTOMER_LIFETIME_DAYS' as string) as input_column\n        union all\n        \n        select\n            8 as input_column_idx,\n            cast('CUSTOMER_SEGMENT' as string) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.099633Z", "completed_at": "2024-09-30T09:50:30.102360Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.102524Z", "completed_at": "2024-09-30T09:50:30.102528Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004194021224975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_row_count_to_equal_mart_jaffle_data__customer_360_930.52d366eb94", "compiled": true, "compiled_code": "\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(*) = 930\n as expression\n\n\n    from `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.104187Z", "completed_at": "2024-09-30T09:50:30.106720Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.106870Z", "completed_at": "2024-09-30T09:50:30.106874Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0038619041442871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.loyal_customer_conditions", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e40\u0e07\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e02\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e08\u0e07\u0e23\u0e31\u0e01\u0e20\u0e31\u0e01\u0e14\u0e35 (loyal customer)\nWITH customer_validation AS (\n    SELECT \n        is_loyal_customer,\n        customer_lifetime_days,\n        total_orders\n    FROM `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n)\nSELECT *\nFROM customer_validation\nWHERE is_loyal_customer = TRUE AND (customer_lifetime_days <= 180 OR total_orders <= 10)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.108403Z", "completed_at": "2024-09-30T09:50:30.110216Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.110366Z", "completed_at": "2024-09-30T09:50:30.110369Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0030851364135742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_customer_id", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35 customer_id \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 NULL\nWITH customer_validation AS (\n    SELECT \n        customer_id\n    FROM `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n)\nSELECT *\nFROM customer_validation\nWHERE customer_id IS NULL", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.111869Z", "completed_at": "2024-09-30T09:50:30.114216Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.114376Z", "completed_at": "2024-09-30T09:50:30.114379Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0036361217498779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_mart_jaffle_data__customer_360_customer_id.0a9a2d200d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `catalog_main`.`default`.`mart_jaffle_data__customer_360`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.115874Z", "completed_at": "2024-09-30T09:50:30.118101Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.118259Z", "completed_at": "2024-09-30T09:50:30.118262Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003493785858154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.not_null_mart_jaffle_data__customer_360_customer_name.2f661cfccc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom `catalog_main`.`default`.`mart_jaffle_data__customer_360`\nwhere customer_name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.119734Z", "completed_at": "2024-09-30T09:50:30.121981Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.122139Z", "completed_at": "2024-09-30T09:50:30.122143Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003507852554321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.unique_mart_jaffle_data__customer_360_customer_id.31caded71f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom `catalog_main`.`default`.`mart_jaffle_data__customer_360`\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.123613Z", "completed_at": "2024-09-30T09:50:30.125136Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.125285Z", "completed_at": "2024-09-30T09:50:30.125288Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0027472972869873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.unique_product_types_count", "compiled": true, "compiled_code": "-- \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e1c\u0e25\u0e34\u0e15\u0e20\u0e31\u0e13\u0e11\u0e4c\u0e17\u0e35\u0e48\u0e0b\u0e37\u0e49\u0e2d\u0e15\u0e23\u0e07\u0e01\u0e31\u0e1a\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e1c\u0e25\u0e34\u0e15\u0e20\u0e31\u0e13\u0e11\u0e4c\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19\nWITH customer_validation AS (\n    SELECT\n        product_types_purchased,\n        unique_product_types_count\n    FROM `catalog_main`.`default`.`mart_jaffle_data__customer_360`\n)\nSELECT *\nFROM customer_validation\nWHERE unique_product_types_count != COALESCE(CARDINALITY(SPLIT(product_types_purchased, ',')), 0)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.830818Z", "completed_at": "2024-09-30T09:50:30.185018Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.185212Z", "completed_at": "2024-09-30T09:50:30.185217Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.35560131072998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_to_exist_mart_jaffle_data__customer_360_product_types_purchased.bb0428b608", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('PRODUCT_TYPES_PURCHASED' as string) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:29.958974Z", "completed_at": "2024-09-30T09:50:30.260843Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.261030Z", "completed_at": "2024-09-30T09:50:30.261035Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.30391502380371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_column_to_exist_mart_jaffle_data__customer_360_visited_store_ids.bb949c6651", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('VISITED_STORE_IDS' as string) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-30T09:50:30.062189Z", "completed_at": "2024-09-30T09:50:30.371463Z"}, {"name": "execute", "started_at": "2024-09-30T09:50:30.372074Z", "completed_at": "2024-09-30T09:50:30.372085Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3120720386505127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dataxdemo.dbt_expectations_expect_table_columns_to_match_ordered_list_mart_jaffle_data__customer_360_customer_id__customer_name__total_orders__total_spent__avg_order_value__first_order_date__last_order_date__customer_lifetime_days__customer_segment__product_types_purchased__unique_product_types_count__visited_store_ids__unique_stores_visited__is_loyal_customer.c15b8e62ef", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('CUSTOMER_ID' as string) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_NAME' as string) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('TOTAL_ORDERS' as string) as relation_column\n        union all\n        \n        select\n            4 as relation_column_idx,\n            cast('TOTAL_SPENT' as string) as relation_column\n        union all\n        \n        select\n            5 as relation_column_idx,\n            cast('AVG_ORDER_VALUE' as string) as relation_column\n        union all\n        \n        select\n            6 as relation_column_idx,\n            cast('FIRST_ORDER_DATE' as string) as relation_column\n        union all\n        \n        select\n            7 as relation_column_idx,\n            cast('LAST_ORDER_DATE' as string) as relation_column\n        union all\n        \n        select\n            8 as relation_column_idx,\n            cast('CUSTOMER_LIFETIME_DAYS' as string) as relation_column\n        union all\n        \n        select\n            9 as relation_column_idx,\n            cast('CUSTOMER_SEGMENT' as string) as relation_column\n        union all\n        \n        select\n            10 as relation_column_idx,\n            cast('PRODUCT_TYPES_PURCHASED' as string) as relation_column\n        union all\n        \n        select\n            11 as relation_column_idx,\n            cast('UNIQUE_PRODUCT_TYPES_COUNT' as string) as relation_column\n        union all\n        \n        select\n            12 as relation_column_idx,\n            cast('VISITED_STORE_IDS' as string) as relation_column\n        union all\n        \n        select\n            13 as relation_column_idx,\n            cast('UNIQUE_STORES_VISITED' as string) as relation_column\n        union all\n        \n        select\n            14 as relation_column_idx,\n            cast('IS_LOYAL_CUSTOMER' as string) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('CUSTOMER_ID' as string) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_NAME' as string) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('TOTAL_ORDERS' as string) as input_column\n        union all\n        \n        select\n            4 as input_column_idx,\n            cast('TOTAL_SPENT' as string) as input_column\n        union all\n        \n        select\n            5 as input_column_idx,\n            cast('AVG_ORDER_VALUE' as string) as input_column\n        union all\n        \n        select\n            6 as input_column_idx,\n            cast('FIRST_ORDER_DATE' as string) as input_column\n        union all\n        \n        select\n            7 as input_column_idx,\n            cast('LAST_ORDER_DATE' as string) as input_column\n        union all\n        \n        select\n            8 as input_column_idx,\n            cast('CUSTOMER_LIFETIME_DAYS' as string) as input_column\n        union all\n        \n        select\n            9 as input_column_idx,\n            cast('CUSTOMER_SEGMENT' as string) as input_column\n        union all\n        \n        select\n            10 as input_column_idx,\n            cast('PRODUCT_TYPES_PURCHASED' as string) as input_column\n        union all\n        \n        select\n            11 as input_column_idx,\n            cast('UNIQUE_PRODUCT_TYPES_COUNT' as string) as input_column\n        union all\n        \n        select\n            12 as input_column_idx,\n            cast('VISITED_STORE_IDS' as string) as input_column\n        union all\n        \n        select\n            13 as input_column_idx,\n            cast('UNIQUE_STORES_VISITED' as string) as input_column\n        union all\n        \n        select\n            14 as input_column_idx,\n            cast('IS_LOYAL_CUSTOMER' as string) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}], "elapsed_time": 4.209322929382324, "args": {"cache_selected_only": false, "use_colors_file": true, "vars": {}, "log_level": "info", "empty_catalog": false, "partial_parse_file_diff": true, "require_resource_names_without_spaces": false, "send_anonymous_usage_stats": true, "write_json": true, "macro_debugging": false, "enable_legacy_logger": false, "log_format": "default", "exclude": [], "indirect_selection": "eager", "select": [], "printer_width": 80, "introspect": true, "defer": false, "project_dir": "/Users/coraline/Desktop/dataxdemo_github", "partial_parse": true, "strict_mode": false, "source_freshness_run_project_hooks": false, "quiet": false, "log_path": "/Users/coraline/Desktop/dataxdemo_github/logs", "warn_error_options": {"include": [], "exclude": []}, "invocation_command": "dbt docs generate", "use_colors": true, "favor_state": false, "which": "generate", "compile": true, "show_resource_report": false, "version_check": true, "print": true, "static_parser": true, "log_file_max_bytes": 10485760, "profiles_dir": "/Users/coraline/.dbt", "require_explicit_package_overrides_for_builtin_materializations": true, "static": false, "populate_cache": true, "log_level_file": "debug", "log_format_file": "debug"}}